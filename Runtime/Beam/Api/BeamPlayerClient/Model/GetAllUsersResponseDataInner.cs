/*
 * Player API
 *
 * The Player API is a service to integrate your game with Beam
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = BeamPlayerClient.Client.OpenAPIDateConverter;

namespace BeamPlayerClient.Model
{
    /// <summary>
    /// GetAllUsersResponseDataInner
    /// </summary>
    [DataContract(Name = "GetAllUsersResponse_data_inner")]
    public partial class GetAllUsersResponseDataInner
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetAllUsersResponseDataInner" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GetAllUsersResponseDataInner() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetAllUsersResponseDataInner" /> class.
        /// </summary>
        /// <param name="externalEntityId">externalEntityId (required).</param>
        /// <param name="userId">userId (required).</param>
        /// <param name="gameId">gameId (required).</param>
        /// <param name="wallets">wallets (required).</param>
        public GetAllUsersResponseDataInner(string externalEntityId = default(string), string userId = default(string), string gameId = default(string), List<GetAllUsersResponseDataInnerWalletsInner> wallets = default(List<GetAllUsersResponseDataInnerWalletsInner>))
        {
            // to ensure "externalEntityId" is required (not null)
            if (externalEntityId == null)
            {
                throw new ArgumentNullException("externalEntityId is a required property for GetAllUsersResponseDataInner and cannot be null");
            }
            this.ExternalEntityId = externalEntityId;
            // to ensure "userId" is required (not null)
            if (userId == null)
            {
                throw new ArgumentNullException("userId is a required property for GetAllUsersResponseDataInner and cannot be null");
            }
            this.UserId = userId;
            // to ensure "gameId" is required (not null)
            if (gameId == null)
            {
                throw new ArgumentNullException("gameId is a required property for GetAllUsersResponseDataInner and cannot be null");
            }
            this.GameId = gameId;
            // to ensure "wallets" is required (not null)
            if (wallets == null)
            {
                throw new ArgumentNullException("wallets is a required property for GetAllUsersResponseDataInner and cannot be null");
            }
            this.Wallets = wallets;
        }

        /// <summary>
        /// Gets or Sets ExternalEntityId
        /// </summary>
        [DataMember(Name = "externalEntityId", IsRequired = true, EmitDefaultValue = true)]
        public string ExternalEntityId { get; set; }

        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [DataMember(Name = "userId", IsRequired = true, EmitDefaultValue = true)]
        public string UserId { get; set; }

        /// <summary>
        /// Gets or Sets GameId
        /// </summary>
        [DataMember(Name = "gameId", IsRequired = true, EmitDefaultValue = true)]
        public string GameId { get; set; }

        /// <summary>
        /// Gets or Sets Wallets
        /// </summary>
        [DataMember(Name = "wallets", IsRequired = true, EmitDefaultValue = true)]
        public List<GetAllUsersResponseDataInnerWalletsInner> Wallets { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetAllUsersResponseDataInner {\n");
            sb.Append("  ExternalEntityId: ").Append(ExternalEntityId).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  GameId: ").Append(GameId).Append("\n");
            sb.Append("  Wallets: ").Append(Wallets).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
