/*
 * Player API
 *
 * The Player API is a service to integrate your game with Beam
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using BeamPlayerClient.Client;
using BeamPlayerClient.Model;

namespace BeamPlayerClient.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAssetsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get a single NFT (e.g. ERC721 / ERC1155)
        /// </summary>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetAddress"></param>
        /// <param name="assetId"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="entityId"> (optional)</param>
        /// <param name="owners">If true, will return owners of the token (optional)</param>
        /// <returns>GetAssetResponse</returns>
        GetAssetResponse GetAsset(string assetAddress, string assetId, decimal? chainId, string entityId, bool? owners);

        /// <summary>
        /// Get a single NFT (e.g. ERC721 / ERC1155)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetAddress"></param>
        /// <param name="assetId"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="entityId"> (optional)</param>
        /// <param name="owners">If true, will return owners of the token (optional)</param>
        /// <returns>ApiResponse of GetAssetResponse</returns>
        ApiResponse<GetAssetResponse> GetAssetWithHttpInfo(string assetAddress, string assetId, decimal? chainId, string entityId, bool? owners);
        /// <summary>
        /// Get all the assets of contract (NFT assets, e.g. ERC721 / ERC1155)
        /// </summary>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetAddress"></param>
        /// <param name="getAssetsForContractBodyInput"></param>
        /// <returns>GetAssetsForContractResponse</returns>
        GetAssetsForContractResponse GetAssetsForContract(string assetAddress, GetAssetsForContractBodyInput getAssetsForContractBodyInput);

        /// <summary>
        /// Get all the assets of contract (NFT assets, e.g. ERC721 / ERC1155)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetAddress"></param>
        /// <param name="getAssetsForContractBodyInput"></param>
        /// <returns>ApiResponse of GetAssetsForContractResponse</returns>
        ApiResponse<GetAssetsForContractResponse> GetAssetsForContractWithHttpInfo(string assetAddress, GetAssetsForContractBodyInput getAssetsForContractBodyInput);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetAddress"></param>
        /// <param name="chainId"></param>
        /// <returns>GetAttributesResponse</returns>
        GetAttributesResponse GetAttributes(string assetAddress, decimal chainId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetAddress"></param>
        /// <param name="chainId"></param>
        /// <returns>ApiResponse of GetAttributesResponse</returns>
        ApiResponse<GetAttributesResponse> GetAttributesWithHttpInfo(string assetAddress, decimal chainId);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetAddress"></param>
        /// <param name="chainId"></param>
        /// <param name="limit"> (optional, default to &quot;10&quot;)</param>
        /// <param name="offset"> (optional, default to &quot;0&quot;)</param>
        /// <returns>GetOwnersResponse</returns>
        GetOwnersResponse GetOwners(string assetAddress, decimal chainId, string limit, string offset);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetAddress"></param>
        /// <param name="chainId"></param>
        /// <param name="limit"> (optional, default to &quot;10&quot;)</param>
        /// <param name="offset"> (optional, default to &quot;0&quot;)</param>
        /// <returns>ApiResponse of GetOwnersResponse</returns>
        ApiResponse<GetOwnersResponse> GetOwnersWithHttpInfo(string assetAddress, decimal chainId, string limit, string offset);
        /// <summary>
        /// Get all the assets of a profile (NFT assets, e.g. ERC721 / ERC1155)
        /// </summary>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="getAssetsForUserBodyInput"></param>
        /// <returns>GetAssetsForUserResponse</returns>
        GetAssetsForUserResponse GetUserAssetsForGamePost(string entityId, GetAssetsForUserBodyInput getAssetsForUserBodyInput);

        /// <summary>
        /// Get all the assets of a profile (NFT assets, e.g. ERC721 / ERC1155)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="getAssetsForUserBodyInput"></param>
        /// <returns>ApiResponse of GetAssetsForUserResponse</returns>
        ApiResponse<GetAssetsForUserResponse> GetUserAssetsForGamePostWithHttpInfo(string entityId, GetAssetsForUserBodyInput getAssetsForUserBodyInput);
        /// <summary>
        /// Get all the currencies owned by an account (ERC20)
        /// </summary>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="chainId"> (optional)</param>
        /// <returns>GetUserCurrenciesResponse</returns>
        GetUserCurrenciesResponse GetUserCurrencies(string entityId, decimal? chainId);

        /// <summary>
        /// Get all the currencies owned by an account (ERC20)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="chainId"> (optional)</param>
        /// <returns>ApiResponse of GetUserCurrenciesResponse</returns>
        ApiResponse<GetUserCurrenciesResponse> GetUserCurrenciesWithHttpInfo(string entityId, decimal? chainId);
        /// <summary>
        /// Get the native token balance
        /// </summary>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="chainId"> (optional)</param>
        /// <returns>GetUserNativeCurrencyResponse</returns>
        GetUserNativeCurrencyResponse GetUserNativeCurrency(string entityId, decimal? chainId);

        /// <summary>
        /// Get the native token balance
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="chainId"> (optional)</param>
        /// <returns>ApiResponse of GetUserNativeCurrencyResponse</returns>
        ApiResponse<GetUserNativeCurrencyResponse> GetUserNativeCurrencyWithHttpInfo(string entityId, decimal? chainId);
        /// <summary>
        /// Transfer an asset (NFT assets, ERC721 / ERC1155)
        /// </summary>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="transferAssetRequestInput"></param>
        /// <returns>CommonOperationResponse</returns>
        CommonOperationResponse TransferAsset(string entityId, TransferAssetRequestInput transferAssetRequestInput);

        /// <summary>
        /// Transfer an asset (NFT assets, ERC721 / ERC1155)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="transferAssetRequestInput"></param>
        /// <returns>ApiResponse of CommonOperationResponse</returns>
        ApiResponse<CommonOperationResponse> TransferAssetWithHttpInfo(string entityId, TransferAssetRequestInput transferAssetRequestInput);
        /// <summary>
        /// Transfer the native token
        /// </summary>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="transferNativeTokenRequestInput"></param>
        /// <returns>CommonOperationResponse</returns>
        CommonOperationResponse TransferNativeToken(string entityId, TransferNativeTokenRequestInput transferNativeTokenRequestInput);

        /// <summary>
        /// Transfer the native token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="transferNativeTokenRequestInput"></param>
        /// <returns>ApiResponse of CommonOperationResponse</returns>
        ApiResponse<CommonOperationResponse> TransferNativeTokenWithHttpInfo(string entityId, TransferNativeTokenRequestInput transferNativeTokenRequestInput);
        /// <summary>
        /// Transfer a token (token assets, ERC20)
        /// </summary>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="transferTokenRequestInput"></param>
        /// <returns>CommonOperationResponse</returns>
        CommonOperationResponse TransferToken(string entityId, TransferTokenRequestInput transferTokenRequestInput);

        /// <summary>
        /// Transfer a token (token assets, ERC20)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="transferTokenRequestInput"></param>
        /// <returns>ApiResponse of CommonOperationResponse</returns>
        ApiResponse<CommonOperationResponse> TransferTokenWithHttpInfo(string entityId, TransferTokenRequestInput transferTokenRequestInput);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAssetsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get a single NFT (e.g. ERC721 / ERC1155)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetAddress"></param>
        /// <param name="assetId"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="entityId"> (optional)</param>
        /// <param name="owners">If true, will return owners of the token (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetAssetResponse</returns>
        Cysharp.Threading.Tasks.UniTask<GetAssetResponse> GetAssetAsync(string assetAddress, string assetId, decimal? chainId, string entityId, bool? owners, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get a single NFT (e.g. ERC721 / ERC1155)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetAddress"></param>
        /// <param name="assetId"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="entityId"> (optional)</param>
        /// <param name="owners">If true, will return owners of the token (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetAssetResponse)</returns>
        Cysharp.Threading.Tasks.UniTask<ApiResponse<GetAssetResponse>> GetAssetWithHttpInfoAsync(string assetAddress, string assetId, decimal? chainId, string entityId, bool? owners, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get all the assets of contract (NFT assets, e.g. ERC721 / ERC1155)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetAddress"></param>
        /// <param name="getAssetsForContractBodyInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetAssetsForContractResponse</returns>
        Cysharp.Threading.Tasks.UniTask<GetAssetsForContractResponse> GetAssetsForContractAsync(string assetAddress, GetAssetsForContractBodyInput getAssetsForContractBodyInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get all the assets of contract (NFT assets, e.g. ERC721 / ERC1155)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetAddress"></param>
        /// <param name="getAssetsForContractBodyInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetAssetsForContractResponse)</returns>
        Cysharp.Threading.Tasks.UniTask<ApiResponse<GetAssetsForContractResponse>> GetAssetsForContractWithHttpInfoAsync(string assetAddress, GetAssetsForContractBodyInput getAssetsForContractBodyInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetAddress"></param>
        /// <param name="chainId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetAttributesResponse</returns>
        Cysharp.Threading.Tasks.UniTask<GetAttributesResponse> GetAttributesAsync(string assetAddress, decimal chainId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetAddress"></param>
        /// <param name="chainId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetAttributesResponse)</returns>
        Cysharp.Threading.Tasks.UniTask<ApiResponse<GetAttributesResponse>> GetAttributesWithHttpInfoAsync(string assetAddress, decimal chainId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetAddress"></param>
        /// <param name="chainId"></param>
        /// <param name="limit"> (optional, default to &quot;10&quot;)</param>
        /// <param name="offset"> (optional, default to &quot;0&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetOwnersResponse</returns>
        Cysharp.Threading.Tasks.UniTask<GetOwnersResponse> GetOwnersAsync(string assetAddress, decimal chainId, string limit, string offset, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetAddress"></param>
        /// <param name="chainId"></param>
        /// <param name="limit"> (optional, default to &quot;10&quot;)</param>
        /// <param name="offset"> (optional, default to &quot;0&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetOwnersResponse)</returns>
        Cysharp.Threading.Tasks.UniTask<ApiResponse<GetOwnersResponse>> GetOwnersWithHttpInfoAsync(string assetAddress, decimal chainId, string limit, string offset, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get all the assets of a profile (NFT assets, e.g. ERC721 / ERC1155)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="getAssetsForUserBodyInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetAssetsForUserResponse</returns>
        Cysharp.Threading.Tasks.UniTask<GetAssetsForUserResponse> GetUserAssetsForGamePostAsync(string entityId, GetAssetsForUserBodyInput getAssetsForUserBodyInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get all the assets of a profile (NFT assets, e.g. ERC721 / ERC1155)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="getAssetsForUserBodyInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetAssetsForUserResponse)</returns>
        Cysharp.Threading.Tasks.UniTask<ApiResponse<GetAssetsForUserResponse>> GetUserAssetsForGamePostWithHttpInfoAsync(string entityId, GetAssetsForUserBodyInput getAssetsForUserBodyInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get all the currencies owned by an account (ERC20)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetUserCurrenciesResponse</returns>
        Cysharp.Threading.Tasks.UniTask<GetUserCurrenciesResponse> GetUserCurrenciesAsync(string entityId, decimal? chainId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get all the currencies owned by an account (ERC20)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetUserCurrenciesResponse)</returns>
        Cysharp.Threading.Tasks.UniTask<ApiResponse<GetUserCurrenciesResponse>> GetUserCurrenciesWithHttpInfoAsync(string entityId, decimal? chainId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get the native token balance
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetUserNativeCurrencyResponse</returns>
        Cysharp.Threading.Tasks.UniTask<GetUserNativeCurrencyResponse> GetUserNativeCurrencyAsync(string entityId, decimal? chainId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get the native token balance
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetUserNativeCurrencyResponse)</returns>
        Cysharp.Threading.Tasks.UniTask<ApiResponse<GetUserNativeCurrencyResponse>> GetUserNativeCurrencyWithHttpInfoAsync(string entityId, decimal? chainId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Transfer an asset (NFT assets, ERC721 / ERC1155)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="transferAssetRequestInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CommonOperationResponse</returns>
        Cysharp.Threading.Tasks.UniTask<CommonOperationResponse> TransferAssetAsync(string entityId, TransferAssetRequestInput transferAssetRequestInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Transfer an asset (NFT assets, ERC721 / ERC1155)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="transferAssetRequestInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CommonOperationResponse)</returns>
        Cysharp.Threading.Tasks.UniTask<ApiResponse<CommonOperationResponse>> TransferAssetWithHttpInfoAsync(string entityId, TransferAssetRequestInput transferAssetRequestInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Transfer the native token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="transferNativeTokenRequestInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CommonOperationResponse</returns>
        Cysharp.Threading.Tasks.UniTask<CommonOperationResponse> TransferNativeTokenAsync(string entityId, TransferNativeTokenRequestInput transferNativeTokenRequestInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Transfer the native token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="transferNativeTokenRequestInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CommonOperationResponse)</returns>
        Cysharp.Threading.Tasks.UniTask<ApiResponse<CommonOperationResponse>> TransferNativeTokenWithHttpInfoAsync(string entityId, TransferNativeTokenRequestInput transferNativeTokenRequestInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Transfer a token (token assets, ERC20)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="transferTokenRequestInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CommonOperationResponse</returns>
        Cysharp.Threading.Tasks.UniTask<CommonOperationResponse> TransferTokenAsync(string entityId, TransferTokenRequestInput transferTokenRequestInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Transfer a token (token assets, ERC20)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="transferTokenRequestInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CommonOperationResponse)</returns>
        Cysharp.Threading.Tasks.UniTask<ApiResponse<CommonOperationResponse>> TransferTokenWithHttpInfoAsync(string entityId, TransferTokenRequestInput transferTokenRequestInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAssetsApi : IAssetsApiSync, IAssetsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AssetsApi : IDisposable, IAssetsApi
    {
        private BeamPlayerClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AssetsApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public AssetsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AssetsApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public AssetsApi(string basePath)
        {
            this.Configuration = BeamPlayerClient.Client.Configuration.MergeConfigurations(
                BeamPlayerClient.Client.GlobalConfiguration.Instance,
                new BeamPlayerClient.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new BeamPlayerClient.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = BeamPlayerClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AssetsApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public AssetsApi(BeamPlayerClient.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = BeamPlayerClient.Client.Configuration.MergeConfigurations(
                BeamPlayerClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new BeamPlayerClient.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = BeamPlayerClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AssetsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public AssetsApi(BeamPlayerClient.Client.ISynchronousClient client, BeamPlayerClient.Client.IAsynchronousClient asyncClient, BeamPlayerClient.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = BeamPlayerClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public BeamPlayerClient.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public BeamPlayerClient.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public BeamPlayerClient.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public BeamPlayerClient.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public BeamPlayerClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get a single NFT (e.g. ERC721 / ERC1155) 
        /// </summary>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetAddress"></param>
        /// <param name="assetId"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="entityId"> (optional)</param>
        /// <param name="owners">If true, will return owners of the token (optional)</param>
        /// <returns>GetAssetResponse</returns>
        public GetAssetResponse GetAsset(string assetAddress, string assetId, decimal? chainId, string entityId, bool? owners)
        {
            BeamPlayerClient.Client.ApiResponse<GetAssetResponse> localVarResponse = GetAssetWithHttpInfo(assetAddress, assetId, chainId, entityId, owners);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a single NFT (e.g. ERC721 / ERC1155) 
        /// </summary>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetAddress"></param>
        /// <param name="assetId"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="entityId"> (optional)</param>
        /// <param name="owners">If true, will return owners of the token (optional)</param>
        /// <returns>ApiResponse of GetAssetResponse</returns>
        public BeamPlayerClient.Client.ApiResponse<GetAssetResponse> GetAssetWithHttpInfo(string assetAddress, string assetId, decimal? chainId, string entityId, bool? owners)
        {
            // verify the required parameter 'assetAddress' is set
            if (assetAddress == null)
                throw new BeamPlayerClient.Client.ApiException(400, "Missing required parameter 'assetAddress' when calling AssetsApi->GetAsset");

            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new BeamPlayerClient.Client.ApiException(400, "Missing required parameter 'assetId' when calling AssetsApi->GetAsset");

            BeamPlayerClient.Client.RequestOptions localVarRequestOptions = new BeamPlayerClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BeamPlayerClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = BeamPlayerClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("assetAddress", BeamPlayerClient.Client.ClientUtils.ParameterToString(assetAddress)); // path parameter
            localVarRequestOptions.PathParameters.Add("assetId", BeamPlayerClient.Client.ClientUtils.ParameterToString(assetId)); // path parameter
            if (chainId != null)
            {
                localVarRequestOptions.QueryParameters.Add(BeamPlayerClient.Client.ClientUtils.ParameterToMultiMap("", "chainId", chainId));
            }
            if (entityId != null)
            {
                localVarRequestOptions.QueryParameters.Add(BeamPlayerClient.Client.ClientUtils.ParameterToMultiMap("", "entityId", entityId));
            }
            if (owners != null)
            {
                localVarRequestOptions.QueryParameters.Add(BeamPlayerClient.Client.ClientUtils.ParameterToMultiMap("", "owners", owners));
            }

            // authentication (beam-api-key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetAssetResponse>("/v1/player/assets/{assetAddress}/assets/{assetId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAsset", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a single NFT (e.g. ERC721 / ERC1155) 
        /// </summary>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetAddress"></param>
        /// <param name="assetId"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="entityId"> (optional)</param>
        /// <param name="owners">If true, will return owners of the token (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetAssetResponse</returns>
        public async Cysharp.Threading.Tasks.UniTask<GetAssetResponse> GetAssetAsync(string assetAddress, string assetId, decimal? chainId, string entityId, bool? owners, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = GetAssetWithHttpInfoAsync(assetAddress, assetId, chainId, entityId, owners, cancellationToken);
            BeamPlayerClient.Client.ApiResponse<GetAssetResponse> localVarResponse = await task;
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a single NFT (e.g. ERC721 / ERC1155) 
        /// </summary>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetAddress"></param>
        /// <param name="assetId"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="entityId"> (optional)</param>
        /// <param name="owners">If true, will return owners of the token (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetAssetResponse)</returns>
        public async Cysharp.Threading.Tasks.UniTask<BeamPlayerClient.Client.ApiResponse<GetAssetResponse>> GetAssetWithHttpInfoAsync(string assetAddress, string assetId, decimal? chainId, string entityId, bool? owners, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'assetAddress' is set
            if (assetAddress == null)
                throw new BeamPlayerClient.Client.ApiException(400, "Missing required parameter 'assetAddress' when calling AssetsApi->GetAsset");

            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new BeamPlayerClient.Client.ApiException(400, "Missing required parameter 'assetId' when calling AssetsApi->GetAsset");


            BeamPlayerClient.Client.RequestOptions localVarRequestOptions = new BeamPlayerClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = BeamPlayerClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = BeamPlayerClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("assetAddress", BeamPlayerClient.Client.ClientUtils.ParameterToString(assetAddress)); // path parameter
            localVarRequestOptions.PathParameters.Add("assetId", BeamPlayerClient.Client.ClientUtils.ParameterToString(assetId)); // path parameter
            if (chainId != null)
            {
                localVarRequestOptions.QueryParameters.Add(BeamPlayerClient.Client.ClientUtils.ParameterToMultiMap("", "chainId", chainId));
            }
            if (entityId != null)
            {
                localVarRequestOptions.QueryParameters.Add(BeamPlayerClient.Client.ClientUtils.ParameterToMultiMap("", "entityId", entityId));
            }
            if (owners != null)
            {
                localVarRequestOptions.QueryParameters.Add(BeamPlayerClient.Client.ClientUtils.ParameterToMultiMap("", "owners", owners));
            }

            // authentication (beam-api-key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<GetAssetResponse>("/v1/player/assets/{assetAddress}/assets/{assetId}", localVarRequestOptions, this.Configuration, cancellationToken);

            var localVarResponse = await task;

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAsset", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all the assets of contract (NFT assets, e.g. ERC721 / ERC1155) 
        /// </summary>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetAddress"></param>
        /// <param name="getAssetsForContractBodyInput"></param>
        /// <returns>GetAssetsForContractResponse</returns>
        public GetAssetsForContractResponse GetAssetsForContract(string assetAddress, GetAssetsForContractBodyInput getAssetsForContractBodyInput)
        {
            BeamPlayerClient.Client.ApiResponse<GetAssetsForContractResponse> localVarResponse = GetAssetsForContractWithHttpInfo(assetAddress, getAssetsForContractBodyInput);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all the assets of contract (NFT assets, e.g. ERC721 / ERC1155) 
        /// </summary>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetAddress"></param>
        /// <param name="getAssetsForContractBodyInput"></param>
        /// <returns>ApiResponse of GetAssetsForContractResponse</returns>
        public BeamPlayerClient.Client.ApiResponse<GetAssetsForContractResponse> GetAssetsForContractWithHttpInfo(string assetAddress, GetAssetsForContractBodyInput getAssetsForContractBodyInput)
        {
            // verify the required parameter 'assetAddress' is set
            if (assetAddress == null)
                throw new BeamPlayerClient.Client.ApiException(400, "Missing required parameter 'assetAddress' when calling AssetsApi->GetAssetsForContract");

            // verify the required parameter 'getAssetsForContractBodyInput' is set
            if (getAssetsForContractBodyInput == null)
                throw new BeamPlayerClient.Client.ApiException(400, "Missing required parameter 'getAssetsForContractBodyInput' when calling AssetsApi->GetAssetsForContract");

            BeamPlayerClient.Client.RequestOptions localVarRequestOptions = new BeamPlayerClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BeamPlayerClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = BeamPlayerClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("assetAddress", BeamPlayerClient.Client.ClientUtils.ParameterToString(assetAddress)); // path parameter
            localVarRequestOptions.Data = getAssetsForContractBodyInput;

            // authentication (beam-api-key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<GetAssetsForContractResponse>("/v1/player/assets/{assetAddress}/assets", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAssetsForContract", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all the assets of contract (NFT assets, e.g. ERC721 / ERC1155) 
        /// </summary>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetAddress"></param>
        /// <param name="getAssetsForContractBodyInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetAssetsForContractResponse</returns>
        public async Cysharp.Threading.Tasks.UniTask<GetAssetsForContractResponse> GetAssetsForContractAsync(string assetAddress, GetAssetsForContractBodyInput getAssetsForContractBodyInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = GetAssetsForContractWithHttpInfoAsync(assetAddress, getAssetsForContractBodyInput, cancellationToken);
            BeamPlayerClient.Client.ApiResponse<GetAssetsForContractResponse> localVarResponse = await task;
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all the assets of contract (NFT assets, e.g. ERC721 / ERC1155) 
        /// </summary>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetAddress"></param>
        /// <param name="getAssetsForContractBodyInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetAssetsForContractResponse)</returns>
        public async Cysharp.Threading.Tasks.UniTask<BeamPlayerClient.Client.ApiResponse<GetAssetsForContractResponse>> GetAssetsForContractWithHttpInfoAsync(string assetAddress, GetAssetsForContractBodyInput getAssetsForContractBodyInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'assetAddress' is set
            if (assetAddress == null)
                throw new BeamPlayerClient.Client.ApiException(400, "Missing required parameter 'assetAddress' when calling AssetsApi->GetAssetsForContract");

            // verify the required parameter 'getAssetsForContractBodyInput' is set
            if (getAssetsForContractBodyInput == null)
                throw new BeamPlayerClient.Client.ApiException(400, "Missing required parameter 'getAssetsForContractBodyInput' when calling AssetsApi->GetAssetsForContract");


            BeamPlayerClient.Client.RequestOptions localVarRequestOptions = new BeamPlayerClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = BeamPlayerClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = BeamPlayerClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("assetAddress", BeamPlayerClient.Client.ClientUtils.ParameterToString(assetAddress)); // path parameter
            localVarRequestOptions.Data = getAssetsForContractBodyInput;

            // authentication (beam-api-key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<GetAssetsForContractResponse>("/v1/player/assets/{assetAddress}/assets", localVarRequestOptions, this.Configuration, cancellationToken);

            var localVarResponse = await task;

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAssetsForContract", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetAddress"></param>
        /// <param name="chainId"></param>
        /// <returns>GetAttributesResponse</returns>
        public GetAttributesResponse GetAttributes(string assetAddress, decimal chainId)
        {
            BeamPlayerClient.Client.ApiResponse<GetAttributesResponse> localVarResponse = GetAttributesWithHttpInfo(assetAddress, chainId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetAddress"></param>
        /// <param name="chainId"></param>
        /// <returns>ApiResponse of GetAttributesResponse</returns>
        public BeamPlayerClient.Client.ApiResponse<GetAttributesResponse> GetAttributesWithHttpInfo(string assetAddress, decimal chainId)
        {
            // verify the required parameter 'assetAddress' is set
            if (assetAddress == null)
                throw new BeamPlayerClient.Client.ApiException(400, "Missing required parameter 'assetAddress' when calling AssetsApi->GetAttributes");

            BeamPlayerClient.Client.RequestOptions localVarRequestOptions = new BeamPlayerClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BeamPlayerClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = BeamPlayerClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("assetAddress", BeamPlayerClient.Client.ClientUtils.ParameterToString(assetAddress)); // path parameter
            localVarRequestOptions.QueryParameters.Add(BeamPlayerClient.Client.ClientUtils.ParameterToMultiMap("", "chainId", chainId));

            // authentication (beam-api-key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetAttributesResponse>("/v1/player/assets/{assetAddress}/attributes", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAttributes", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetAddress"></param>
        /// <param name="chainId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetAttributesResponse</returns>
        public async Cysharp.Threading.Tasks.UniTask<GetAttributesResponse> GetAttributesAsync(string assetAddress, decimal chainId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = GetAttributesWithHttpInfoAsync(assetAddress, chainId, cancellationToken);
            BeamPlayerClient.Client.ApiResponse<GetAttributesResponse> localVarResponse = await task;
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetAddress"></param>
        /// <param name="chainId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetAttributesResponse)</returns>
        public async Cysharp.Threading.Tasks.UniTask<BeamPlayerClient.Client.ApiResponse<GetAttributesResponse>> GetAttributesWithHttpInfoAsync(string assetAddress, decimal chainId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'assetAddress' is set
            if (assetAddress == null)
                throw new BeamPlayerClient.Client.ApiException(400, "Missing required parameter 'assetAddress' when calling AssetsApi->GetAttributes");


            BeamPlayerClient.Client.RequestOptions localVarRequestOptions = new BeamPlayerClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = BeamPlayerClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = BeamPlayerClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("assetAddress", BeamPlayerClient.Client.ClientUtils.ParameterToString(assetAddress)); // path parameter
            localVarRequestOptions.QueryParameters.Add(BeamPlayerClient.Client.ClientUtils.ParameterToMultiMap("", "chainId", chainId));

            // authentication (beam-api-key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<GetAttributesResponse>("/v1/player/assets/{assetAddress}/attributes", localVarRequestOptions, this.Configuration, cancellationToken);

            var localVarResponse = await task;

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAttributes", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetAddress"></param>
        /// <param name="chainId"></param>
        /// <param name="limit"> (optional, default to &quot;10&quot;)</param>
        /// <param name="offset"> (optional, default to &quot;0&quot;)</param>
        /// <returns>GetOwnersResponse</returns>
        public GetOwnersResponse GetOwners(string assetAddress, decimal chainId, string limit, string offset)
        {
            BeamPlayerClient.Client.ApiResponse<GetOwnersResponse> localVarResponse = GetOwnersWithHttpInfo(assetAddress, chainId, limit, offset);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetAddress"></param>
        /// <param name="chainId"></param>
        /// <param name="limit"> (optional, default to &quot;10&quot;)</param>
        /// <param name="offset"> (optional, default to &quot;0&quot;)</param>
        /// <returns>ApiResponse of GetOwnersResponse</returns>
        public BeamPlayerClient.Client.ApiResponse<GetOwnersResponse> GetOwnersWithHttpInfo(string assetAddress, decimal chainId, string limit, string offset)
        {
            // verify the required parameter 'assetAddress' is set
            if (assetAddress == null)
                throw new BeamPlayerClient.Client.ApiException(400, "Missing required parameter 'assetAddress' when calling AssetsApi->GetOwners");

            BeamPlayerClient.Client.RequestOptions localVarRequestOptions = new BeamPlayerClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BeamPlayerClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = BeamPlayerClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("assetAddress", BeamPlayerClient.Client.ClientUtils.ParameterToString(assetAddress)); // path parameter
            localVarRequestOptions.QueryParameters.Add(BeamPlayerClient.Client.ClientUtils.ParameterToMultiMap("", "chainId", chainId));
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(BeamPlayerClient.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(BeamPlayerClient.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            // authentication (beam-api-key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetOwnersResponse>("/v1/player/assets/{assetAddress}/owners", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOwners", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetAddress"></param>
        /// <param name="chainId"></param>
        /// <param name="limit"> (optional, default to &quot;10&quot;)</param>
        /// <param name="offset"> (optional, default to &quot;0&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetOwnersResponse</returns>
        public async Cysharp.Threading.Tasks.UniTask<GetOwnersResponse> GetOwnersAsync(string assetAddress, decimal chainId, string limit, string offset, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = GetOwnersWithHttpInfoAsync(assetAddress, chainId, limit, offset, cancellationToken);
            BeamPlayerClient.Client.ApiResponse<GetOwnersResponse> localVarResponse = await task;
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetAddress"></param>
        /// <param name="chainId"></param>
        /// <param name="limit"> (optional, default to &quot;10&quot;)</param>
        /// <param name="offset"> (optional, default to &quot;0&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetOwnersResponse)</returns>
        public async Cysharp.Threading.Tasks.UniTask<BeamPlayerClient.Client.ApiResponse<GetOwnersResponse>> GetOwnersWithHttpInfoAsync(string assetAddress, decimal chainId, string limit, string offset, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'assetAddress' is set
            if (assetAddress == null)
                throw new BeamPlayerClient.Client.ApiException(400, "Missing required parameter 'assetAddress' when calling AssetsApi->GetOwners");


            BeamPlayerClient.Client.RequestOptions localVarRequestOptions = new BeamPlayerClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = BeamPlayerClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = BeamPlayerClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("assetAddress", BeamPlayerClient.Client.ClientUtils.ParameterToString(assetAddress)); // path parameter
            localVarRequestOptions.QueryParameters.Add(BeamPlayerClient.Client.ClientUtils.ParameterToMultiMap("", "chainId", chainId));
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(BeamPlayerClient.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(BeamPlayerClient.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            // authentication (beam-api-key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<GetOwnersResponse>("/v1/player/assets/{assetAddress}/owners", localVarRequestOptions, this.Configuration, cancellationToken);

            var localVarResponse = await task;

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOwners", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all the assets of a profile (NFT assets, e.g. ERC721 / ERC1155) 
        /// </summary>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="getAssetsForUserBodyInput"></param>
        /// <returns>GetAssetsForUserResponse</returns>
        public GetAssetsForUserResponse GetUserAssetsForGamePost(string entityId, GetAssetsForUserBodyInput getAssetsForUserBodyInput)
        {
            BeamPlayerClient.Client.ApiResponse<GetAssetsForUserResponse> localVarResponse = GetUserAssetsForGamePostWithHttpInfo(entityId, getAssetsForUserBodyInput);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all the assets of a profile (NFT assets, e.g. ERC721 / ERC1155) 
        /// </summary>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="getAssetsForUserBodyInput"></param>
        /// <returns>ApiResponse of GetAssetsForUserResponse</returns>
        public BeamPlayerClient.Client.ApiResponse<GetAssetsForUserResponse> GetUserAssetsForGamePostWithHttpInfo(string entityId, GetAssetsForUserBodyInput getAssetsForUserBodyInput)
        {
            // verify the required parameter 'entityId' is set
            if (entityId == null)
                throw new BeamPlayerClient.Client.ApiException(400, "Missing required parameter 'entityId' when calling AssetsApi->GetUserAssetsForGamePost");

            // verify the required parameter 'getAssetsForUserBodyInput' is set
            if (getAssetsForUserBodyInput == null)
                throw new BeamPlayerClient.Client.ApiException(400, "Missing required parameter 'getAssetsForUserBodyInput' when calling AssetsApi->GetUserAssetsForGamePost");

            BeamPlayerClient.Client.RequestOptions localVarRequestOptions = new BeamPlayerClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BeamPlayerClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = BeamPlayerClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("entityId", BeamPlayerClient.Client.ClientUtils.ParameterToString(entityId)); // path parameter
            localVarRequestOptions.Data = getAssetsForUserBodyInput;

            // authentication (beam-api-key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<GetAssetsForUserResponse>("/v1/player/assets/users/{entityId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUserAssetsForGamePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all the assets of a profile (NFT assets, e.g. ERC721 / ERC1155) 
        /// </summary>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="getAssetsForUserBodyInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetAssetsForUserResponse</returns>
        public async Cysharp.Threading.Tasks.UniTask<GetAssetsForUserResponse> GetUserAssetsForGamePostAsync(string entityId, GetAssetsForUserBodyInput getAssetsForUserBodyInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = GetUserAssetsForGamePostWithHttpInfoAsync(entityId, getAssetsForUserBodyInput, cancellationToken);
            BeamPlayerClient.Client.ApiResponse<GetAssetsForUserResponse> localVarResponse = await task;
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all the assets of a profile (NFT assets, e.g. ERC721 / ERC1155) 
        /// </summary>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="getAssetsForUserBodyInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetAssetsForUserResponse)</returns>
        public async Cysharp.Threading.Tasks.UniTask<BeamPlayerClient.Client.ApiResponse<GetAssetsForUserResponse>> GetUserAssetsForGamePostWithHttpInfoAsync(string entityId, GetAssetsForUserBodyInput getAssetsForUserBodyInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'entityId' is set
            if (entityId == null)
                throw new BeamPlayerClient.Client.ApiException(400, "Missing required parameter 'entityId' when calling AssetsApi->GetUserAssetsForGamePost");

            // verify the required parameter 'getAssetsForUserBodyInput' is set
            if (getAssetsForUserBodyInput == null)
                throw new BeamPlayerClient.Client.ApiException(400, "Missing required parameter 'getAssetsForUserBodyInput' when calling AssetsApi->GetUserAssetsForGamePost");


            BeamPlayerClient.Client.RequestOptions localVarRequestOptions = new BeamPlayerClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = BeamPlayerClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = BeamPlayerClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("entityId", BeamPlayerClient.Client.ClientUtils.ParameterToString(entityId)); // path parameter
            localVarRequestOptions.Data = getAssetsForUserBodyInput;

            // authentication (beam-api-key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<GetAssetsForUserResponse>("/v1/player/assets/users/{entityId}", localVarRequestOptions, this.Configuration, cancellationToken);

            var localVarResponse = await task;

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUserAssetsForGamePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all the currencies owned by an account (ERC20) 
        /// </summary>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="chainId"> (optional)</param>
        /// <returns>GetUserCurrenciesResponse</returns>
        public GetUserCurrenciesResponse GetUserCurrencies(string entityId, decimal? chainId)
        {
            BeamPlayerClient.Client.ApiResponse<GetUserCurrenciesResponse> localVarResponse = GetUserCurrenciesWithHttpInfo(entityId, chainId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all the currencies owned by an account (ERC20) 
        /// </summary>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="chainId"> (optional)</param>
        /// <returns>ApiResponse of GetUserCurrenciesResponse</returns>
        public BeamPlayerClient.Client.ApiResponse<GetUserCurrenciesResponse> GetUserCurrenciesWithHttpInfo(string entityId, decimal? chainId)
        {
            // verify the required parameter 'entityId' is set
            if (entityId == null)
                throw new BeamPlayerClient.Client.ApiException(400, "Missing required parameter 'entityId' when calling AssetsApi->GetUserCurrencies");

            BeamPlayerClient.Client.RequestOptions localVarRequestOptions = new BeamPlayerClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BeamPlayerClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = BeamPlayerClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("entityId", BeamPlayerClient.Client.ClientUtils.ParameterToString(entityId)); // path parameter
            if (chainId != null)
            {
                localVarRequestOptions.QueryParameters.Add(BeamPlayerClient.Client.ClientUtils.ParameterToMultiMap("", "chainId", chainId));
            }

            // authentication (beam-api-key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetUserCurrenciesResponse>("/v1/player/assets/users/{entityId}/currencies", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUserCurrencies", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all the currencies owned by an account (ERC20) 
        /// </summary>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetUserCurrenciesResponse</returns>
        public async Cysharp.Threading.Tasks.UniTask<GetUserCurrenciesResponse> GetUserCurrenciesAsync(string entityId, decimal? chainId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = GetUserCurrenciesWithHttpInfoAsync(entityId, chainId, cancellationToken);
            BeamPlayerClient.Client.ApiResponse<GetUserCurrenciesResponse> localVarResponse = await task;
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all the currencies owned by an account (ERC20) 
        /// </summary>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetUserCurrenciesResponse)</returns>
        public async Cysharp.Threading.Tasks.UniTask<BeamPlayerClient.Client.ApiResponse<GetUserCurrenciesResponse>> GetUserCurrenciesWithHttpInfoAsync(string entityId, decimal? chainId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'entityId' is set
            if (entityId == null)
                throw new BeamPlayerClient.Client.ApiException(400, "Missing required parameter 'entityId' when calling AssetsApi->GetUserCurrencies");


            BeamPlayerClient.Client.RequestOptions localVarRequestOptions = new BeamPlayerClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = BeamPlayerClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = BeamPlayerClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("entityId", BeamPlayerClient.Client.ClientUtils.ParameterToString(entityId)); // path parameter
            if (chainId != null)
            {
                localVarRequestOptions.QueryParameters.Add(BeamPlayerClient.Client.ClientUtils.ParameterToMultiMap("", "chainId", chainId));
            }

            // authentication (beam-api-key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<GetUserCurrenciesResponse>("/v1/player/assets/users/{entityId}/currencies", localVarRequestOptions, this.Configuration, cancellationToken);

            var localVarResponse = await task;

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUserCurrencies", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the native token balance 
        /// </summary>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="chainId"> (optional)</param>
        /// <returns>GetUserNativeCurrencyResponse</returns>
        public GetUserNativeCurrencyResponse GetUserNativeCurrency(string entityId, decimal? chainId)
        {
            BeamPlayerClient.Client.ApiResponse<GetUserNativeCurrencyResponse> localVarResponse = GetUserNativeCurrencyWithHttpInfo(entityId, chainId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the native token balance 
        /// </summary>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="chainId"> (optional)</param>
        /// <returns>ApiResponse of GetUserNativeCurrencyResponse</returns>
        public BeamPlayerClient.Client.ApiResponse<GetUserNativeCurrencyResponse> GetUserNativeCurrencyWithHttpInfo(string entityId, decimal? chainId)
        {
            // verify the required parameter 'entityId' is set
            if (entityId == null)
                throw new BeamPlayerClient.Client.ApiException(400, "Missing required parameter 'entityId' when calling AssetsApi->GetUserNativeCurrency");

            BeamPlayerClient.Client.RequestOptions localVarRequestOptions = new BeamPlayerClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BeamPlayerClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = BeamPlayerClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("entityId", BeamPlayerClient.Client.ClientUtils.ParameterToString(entityId)); // path parameter
            if (chainId != null)
            {
                localVarRequestOptions.QueryParameters.Add(BeamPlayerClient.Client.ClientUtils.ParameterToMultiMap("", "chainId", chainId));
            }

            // authentication (beam-api-key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetUserNativeCurrencyResponse>("/v1/player/assets/users/{entityId}/native", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUserNativeCurrency", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the native token balance 
        /// </summary>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetUserNativeCurrencyResponse</returns>
        public async Cysharp.Threading.Tasks.UniTask<GetUserNativeCurrencyResponse> GetUserNativeCurrencyAsync(string entityId, decimal? chainId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = GetUserNativeCurrencyWithHttpInfoAsync(entityId, chainId, cancellationToken);
            BeamPlayerClient.Client.ApiResponse<GetUserNativeCurrencyResponse> localVarResponse = await task;
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the native token balance 
        /// </summary>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetUserNativeCurrencyResponse)</returns>
        public async Cysharp.Threading.Tasks.UniTask<BeamPlayerClient.Client.ApiResponse<GetUserNativeCurrencyResponse>> GetUserNativeCurrencyWithHttpInfoAsync(string entityId, decimal? chainId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'entityId' is set
            if (entityId == null)
                throw new BeamPlayerClient.Client.ApiException(400, "Missing required parameter 'entityId' when calling AssetsApi->GetUserNativeCurrency");


            BeamPlayerClient.Client.RequestOptions localVarRequestOptions = new BeamPlayerClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = BeamPlayerClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = BeamPlayerClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("entityId", BeamPlayerClient.Client.ClientUtils.ParameterToString(entityId)); // path parameter
            if (chainId != null)
            {
                localVarRequestOptions.QueryParameters.Add(BeamPlayerClient.Client.ClientUtils.ParameterToMultiMap("", "chainId", chainId));
            }

            // authentication (beam-api-key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<GetUserNativeCurrencyResponse>("/v1/player/assets/users/{entityId}/native", localVarRequestOptions, this.Configuration, cancellationToken);

            var localVarResponse = await task;

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUserNativeCurrency", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Transfer an asset (NFT assets, ERC721 / ERC1155) 
        /// </summary>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="transferAssetRequestInput"></param>
        /// <returns>CommonOperationResponse</returns>
        public CommonOperationResponse TransferAsset(string entityId, TransferAssetRequestInput transferAssetRequestInput)
        {
            BeamPlayerClient.Client.ApiResponse<CommonOperationResponse> localVarResponse = TransferAssetWithHttpInfo(entityId, transferAssetRequestInput);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Transfer an asset (NFT assets, ERC721 / ERC1155) 
        /// </summary>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="transferAssetRequestInput"></param>
        /// <returns>ApiResponse of CommonOperationResponse</returns>
        public BeamPlayerClient.Client.ApiResponse<CommonOperationResponse> TransferAssetWithHttpInfo(string entityId, TransferAssetRequestInput transferAssetRequestInput)
        {
            // verify the required parameter 'entityId' is set
            if (entityId == null)
                throw new BeamPlayerClient.Client.ApiException(400, "Missing required parameter 'entityId' when calling AssetsApi->TransferAsset");

            // verify the required parameter 'transferAssetRequestInput' is set
            if (transferAssetRequestInput == null)
                throw new BeamPlayerClient.Client.ApiException(400, "Missing required parameter 'transferAssetRequestInput' when calling AssetsApi->TransferAsset");

            BeamPlayerClient.Client.RequestOptions localVarRequestOptions = new BeamPlayerClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BeamPlayerClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = BeamPlayerClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("entityId", BeamPlayerClient.Client.ClientUtils.ParameterToString(entityId)); // path parameter
            localVarRequestOptions.Data = transferAssetRequestInput;

            // authentication (beam-api-key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CommonOperationResponse>("/v1/player/assets/users/{entityId}/transfer-asset", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TransferAsset", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Transfer an asset (NFT assets, ERC721 / ERC1155) 
        /// </summary>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="transferAssetRequestInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CommonOperationResponse</returns>
        public async Cysharp.Threading.Tasks.UniTask<CommonOperationResponse> TransferAssetAsync(string entityId, TransferAssetRequestInput transferAssetRequestInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = TransferAssetWithHttpInfoAsync(entityId, transferAssetRequestInput, cancellationToken);
            BeamPlayerClient.Client.ApiResponse<CommonOperationResponse> localVarResponse = await task;
            return localVarResponse.Data;
        }

        /// <summary>
        /// Transfer an asset (NFT assets, ERC721 / ERC1155) 
        /// </summary>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="transferAssetRequestInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CommonOperationResponse)</returns>
        public async Cysharp.Threading.Tasks.UniTask<BeamPlayerClient.Client.ApiResponse<CommonOperationResponse>> TransferAssetWithHttpInfoAsync(string entityId, TransferAssetRequestInput transferAssetRequestInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'entityId' is set
            if (entityId == null)
                throw new BeamPlayerClient.Client.ApiException(400, "Missing required parameter 'entityId' when calling AssetsApi->TransferAsset");

            // verify the required parameter 'transferAssetRequestInput' is set
            if (transferAssetRequestInput == null)
                throw new BeamPlayerClient.Client.ApiException(400, "Missing required parameter 'transferAssetRequestInput' when calling AssetsApi->TransferAsset");


            BeamPlayerClient.Client.RequestOptions localVarRequestOptions = new BeamPlayerClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = BeamPlayerClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = BeamPlayerClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("entityId", BeamPlayerClient.Client.ClientUtils.ParameterToString(entityId)); // path parameter
            localVarRequestOptions.Data = transferAssetRequestInput;

            // authentication (beam-api-key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<CommonOperationResponse>("/v1/player/assets/users/{entityId}/transfer-asset", localVarRequestOptions, this.Configuration, cancellationToken);

            var localVarResponse = await task;

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TransferAsset", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Transfer the native token 
        /// </summary>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="transferNativeTokenRequestInput"></param>
        /// <returns>CommonOperationResponse</returns>
        public CommonOperationResponse TransferNativeToken(string entityId, TransferNativeTokenRequestInput transferNativeTokenRequestInput)
        {
            BeamPlayerClient.Client.ApiResponse<CommonOperationResponse> localVarResponse = TransferNativeTokenWithHttpInfo(entityId, transferNativeTokenRequestInput);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Transfer the native token 
        /// </summary>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="transferNativeTokenRequestInput"></param>
        /// <returns>ApiResponse of CommonOperationResponse</returns>
        public BeamPlayerClient.Client.ApiResponse<CommonOperationResponse> TransferNativeTokenWithHttpInfo(string entityId, TransferNativeTokenRequestInput transferNativeTokenRequestInput)
        {
            // verify the required parameter 'entityId' is set
            if (entityId == null)
                throw new BeamPlayerClient.Client.ApiException(400, "Missing required parameter 'entityId' when calling AssetsApi->TransferNativeToken");

            // verify the required parameter 'transferNativeTokenRequestInput' is set
            if (transferNativeTokenRequestInput == null)
                throw new BeamPlayerClient.Client.ApiException(400, "Missing required parameter 'transferNativeTokenRequestInput' when calling AssetsApi->TransferNativeToken");

            BeamPlayerClient.Client.RequestOptions localVarRequestOptions = new BeamPlayerClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BeamPlayerClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = BeamPlayerClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("entityId", BeamPlayerClient.Client.ClientUtils.ParameterToString(entityId)); // path parameter
            localVarRequestOptions.Data = transferNativeTokenRequestInput;

            // authentication (beam-api-key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CommonOperationResponse>("/v1/player/assets/users/{entityId}/transfer-native", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TransferNativeToken", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Transfer the native token 
        /// </summary>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="transferNativeTokenRequestInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CommonOperationResponse</returns>
        public async Cysharp.Threading.Tasks.UniTask<CommonOperationResponse> TransferNativeTokenAsync(string entityId, TransferNativeTokenRequestInput transferNativeTokenRequestInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = TransferNativeTokenWithHttpInfoAsync(entityId, transferNativeTokenRequestInput, cancellationToken);
            BeamPlayerClient.Client.ApiResponse<CommonOperationResponse> localVarResponse = await task;
            return localVarResponse.Data;
        }

        /// <summary>
        /// Transfer the native token 
        /// </summary>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="transferNativeTokenRequestInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CommonOperationResponse)</returns>
        public async Cysharp.Threading.Tasks.UniTask<BeamPlayerClient.Client.ApiResponse<CommonOperationResponse>> TransferNativeTokenWithHttpInfoAsync(string entityId, TransferNativeTokenRequestInput transferNativeTokenRequestInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'entityId' is set
            if (entityId == null)
                throw new BeamPlayerClient.Client.ApiException(400, "Missing required parameter 'entityId' when calling AssetsApi->TransferNativeToken");

            // verify the required parameter 'transferNativeTokenRequestInput' is set
            if (transferNativeTokenRequestInput == null)
                throw new BeamPlayerClient.Client.ApiException(400, "Missing required parameter 'transferNativeTokenRequestInput' when calling AssetsApi->TransferNativeToken");


            BeamPlayerClient.Client.RequestOptions localVarRequestOptions = new BeamPlayerClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = BeamPlayerClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = BeamPlayerClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("entityId", BeamPlayerClient.Client.ClientUtils.ParameterToString(entityId)); // path parameter
            localVarRequestOptions.Data = transferNativeTokenRequestInput;

            // authentication (beam-api-key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<CommonOperationResponse>("/v1/player/assets/users/{entityId}/transfer-native", localVarRequestOptions, this.Configuration, cancellationToken);

            var localVarResponse = await task;

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TransferNativeToken", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Transfer a token (token assets, ERC20) 
        /// </summary>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="transferTokenRequestInput"></param>
        /// <returns>CommonOperationResponse</returns>
        public CommonOperationResponse TransferToken(string entityId, TransferTokenRequestInput transferTokenRequestInput)
        {
            BeamPlayerClient.Client.ApiResponse<CommonOperationResponse> localVarResponse = TransferTokenWithHttpInfo(entityId, transferTokenRequestInput);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Transfer a token (token assets, ERC20) 
        /// </summary>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="transferTokenRequestInput"></param>
        /// <returns>ApiResponse of CommonOperationResponse</returns>
        public BeamPlayerClient.Client.ApiResponse<CommonOperationResponse> TransferTokenWithHttpInfo(string entityId, TransferTokenRequestInput transferTokenRequestInput)
        {
            // verify the required parameter 'entityId' is set
            if (entityId == null)
                throw new BeamPlayerClient.Client.ApiException(400, "Missing required parameter 'entityId' when calling AssetsApi->TransferToken");

            // verify the required parameter 'transferTokenRequestInput' is set
            if (transferTokenRequestInput == null)
                throw new BeamPlayerClient.Client.ApiException(400, "Missing required parameter 'transferTokenRequestInput' when calling AssetsApi->TransferToken");

            BeamPlayerClient.Client.RequestOptions localVarRequestOptions = new BeamPlayerClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BeamPlayerClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = BeamPlayerClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("entityId", BeamPlayerClient.Client.ClientUtils.ParameterToString(entityId)); // path parameter
            localVarRequestOptions.Data = transferTokenRequestInput;

            // authentication (beam-api-key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CommonOperationResponse>("/v1/player/assets/users/{entityId}/transfer-token", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TransferToken", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Transfer a token (token assets, ERC20) 
        /// </summary>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="transferTokenRequestInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CommonOperationResponse</returns>
        public async Cysharp.Threading.Tasks.UniTask<CommonOperationResponse> TransferTokenAsync(string entityId, TransferTokenRequestInput transferTokenRequestInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = TransferTokenWithHttpInfoAsync(entityId, transferTokenRequestInput, cancellationToken);
            BeamPlayerClient.Client.ApiResponse<CommonOperationResponse> localVarResponse = await task;
            return localVarResponse.Data;
        }

        /// <summary>
        /// Transfer a token (token assets, ERC20) 
        /// </summary>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="transferTokenRequestInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CommonOperationResponse)</returns>
        public async Cysharp.Threading.Tasks.UniTask<BeamPlayerClient.Client.ApiResponse<CommonOperationResponse>> TransferTokenWithHttpInfoAsync(string entityId, TransferTokenRequestInput transferTokenRequestInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'entityId' is set
            if (entityId == null)
                throw new BeamPlayerClient.Client.ApiException(400, "Missing required parameter 'entityId' when calling AssetsApi->TransferToken");

            // verify the required parameter 'transferTokenRequestInput' is set
            if (transferTokenRequestInput == null)
                throw new BeamPlayerClient.Client.ApiException(400, "Missing required parameter 'transferTokenRequestInput' when calling AssetsApi->TransferToken");


            BeamPlayerClient.Client.RequestOptions localVarRequestOptions = new BeamPlayerClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = BeamPlayerClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = BeamPlayerClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("entityId", BeamPlayerClient.Client.ClientUtils.ParameterToString(entityId)); // path parameter
            localVarRequestOptions.Data = transferTokenRequestInput;

            // authentication (beam-api-key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<CommonOperationResponse>("/v1/player/assets/users/{entityId}/transfer-token", localVarRequestOptions, this.Configuration, cancellationToken);

            var localVarResponse = await task;

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TransferToken", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
