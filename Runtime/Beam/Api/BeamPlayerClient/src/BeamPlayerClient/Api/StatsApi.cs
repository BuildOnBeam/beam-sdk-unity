/*
 * Player API
 *
 * The Player API is a service to integrate your game with Beam
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using BeamPlayerClient.Client;
using BeamPlayerClient.Model;

namespace BeamPlayerClient.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IStatsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get asset stats
        /// </summary>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetAddress"></param>
        /// <param name="assetId"></param>
        /// <param name="statsRequestInput"></param>
        /// <returns>StatsResponse</returns>
        StatsResponse GetAssetStats(string assetAddress, string assetId, StatsRequestInput statsRequestInput);

        /// <summary>
        /// Get asset stats
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetAddress"></param>
        /// <param name="assetId"></param>
        /// <param name="statsRequestInput"></param>
        /// <returns>ApiResponse of StatsResponse</returns>
        ApiResponse<StatsResponse> GetAssetStatsWithHttpInfo(string assetAddress, string assetId, StatsRequestInput statsRequestInput);
        /// <summary>
        /// Get assets stats
        /// </summary>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetAddress"></param>
        /// <param name="statsRequestInput"></param>
        /// <returns>StatsResponse</returns>
        StatsResponse GetAssetsStats(string assetAddress, StatsRequestInput statsRequestInput);

        /// <summary>
        /// Get assets stats
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetAddress"></param>
        /// <param name="statsRequestInput"></param>
        /// <returns>ApiResponse of StatsResponse</returns>
        ApiResponse<StatsResponse> GetAssetsStatsWithHttpInfo(string assetAddress, StatsRequestInput statsRequestInput);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IStatsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get asset stats
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetAddress"></param>
        /// <param name="assetId"></param>
        /// <param name="statsRequestInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StatsResponse</returns>
        Cysharp.Threading.Tasks.UniTask<StatsResponse> GetAssetStatsAsync(string assetAddress, string assetId, StatsRequestInput statsRequestInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get asset stats
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetAddress"></param>
        /// <param name="assetId"></param>
        /// <param name="statsRequestInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StatsResponse)</returns>
        Cysharp.Threading.Tasks.UniTask<ApiResponse<StatsResponse>> GetAssetStatsWithHttpInfoAsync(string assetAddress, string assetId, StatsRequestInput statsRequestInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get assets stats
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetAddress"></param>
        /// <param name="statsRequestInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StatsResponse</returns>
        Cysharp.Threading.Tasks.UniTask<StatsResponse> GetAssetsStatsAsync(string assetAddress, StatsRequestInput statsRequestInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get assets stats
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetAddress"></param>
        /// <param name="statsRequestInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StatsResponse)</returns>
        Cysharp.Threading.Tasks.UniTask<ApiResponse<StatsResponse>> GetAssetsStatsWithHttpInfoAsync(string assetAddress, StatsRequestInput statsRequestInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IStatsApi : IStatsApiSync, IStatsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class StatsApi : IDisposable, IStatsApi
    {
        private BeamPlayerClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="StatsApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public StatsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="StatsApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public StatsApi(string basePath)
        {
            this.Configuration = BeamPlayerClient.Client.Configuration.MergeConfigurations(
                BeamPlayerClient.Client.GlobalConfiguration.Instance,
                new BeamPlayerClient.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new BeamPlayerClient.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = BeamPlayerClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="StatsApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public StatsApi(BeamPlayerClient.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = BeamPlayerClient.Client.Configuration.MergeConfigurations(
                BeamPlayerClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new BeamPlayerClient.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = BeamPlayerClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="StatsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public StatsApi(BeamPlayerClient.Client.ISynchronousClient client, BeamPlayerClient.Client.IAsynchronousClient asyncClient, BeamPlayerClient.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = BeamPlayerClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public BeamPlayerClient.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public BeamPlayerClient.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public BeamPlayerClient.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public BeamPlayerClient.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public BeamPlayerClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get asset stats 
        /// </summary>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetAddress"></param>
        /// <param name="assetId"></param>
        /// <param name="statsRequestInput"></param>
        /// <returns>StatsResponse</returns>
        public StatsResponse GetAssetStats(string assetAddress, string assetId, StatsRequestInput statsRequestInput)
        {
            BeamPlayerClient.Client.ApiResponse<StatsResponse> localVarResponse = GetAssetStatsWithHttpInfo(assetAddress, assetId, statsRequestInput);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get asset stats 
        /// </summary>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetAddress"></param>
        /// <param name="assetId"></param>
        /// <param name="statsRequestInput"></param>
        /// <returns>ApiResponse of StatsResponse</returns>
        public BeamPlayerClient.Client.ApiResponse<StatsResponse> GetAssetStatsWithHttpInfo(string assetAddress, string assetId, StatsRequestInput statsRequestInput)
        {
            // verify the required parameter 'assetAddress' is set
            if (assetAddress == null)
                throw new BeamPlayerClient.Client.ApiException(400, "Missing required parameter 'assetAddress' when calling StatsApi->GetAssetStats");

            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new BeamPlayerClient.Client.ApiException(400, "Missing required parameter 'assetId' when calling StatsApi->GetAssetStats");

            // verify the required parameter 'statsRequestInput' is set
            if (statsRequestInput == null)
                throw new BeamPlayerClient.Client.ApiException(400, "Missing required parameter 'statsRequestInput' when calling StatsApi->GetAssetStats");

            BeamPlayerClient.Client.RequestOptions localVarRequestOptions = new BeamPlayerClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BeamPlayerClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = BeamPlayerClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("assetAddress", BeamPlayerClient.Client.ClientUtils.ParameterToString(assetAddress)); // path parameter
            localVarRequestOptions.PathParameters.Add("assetId", BeamPlayerClient.Client.ClientUtils.ParameterToString(assetId)); // path parameter
            localVarRequestOptions.Data = statsRequestInput;

            // authentication (beam-api-key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<StatsResponse>("/v1/player/stats/{assetAddress}/assets/{assetId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAssetStats", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get asset stats 
        /// </summary>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetAddress"></param>
        /// <param name="assetId"></param>
        /// <param name="statsRequestInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StatsResponse</returns>
        public async Cysharp.Threading.Tasks.UniTask<StatsResponse> GetAssetStatsAsync(string assetAddress, string assetId, StatsRequestInput statsRequestInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = GetAssetStatsWithHttpInfoAsync(assetAddress, assetId, statsRequestInput, cancellationToken);
            BeamPlayerClient.Client.ApiResponse<StatsResponse> localVarResponse = await task;
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get asset stats 
        /// </summary>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetAddress"></param>
        /// <param name="assetId"></param>
        /// <param name="statsRequestInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StatsResponse)</returns>
        public async Cysharp.Threading.Tasks.UniTask<BeamPlayerClient.Client.ApiResponse<StatsResponse>> GetAssetStatsWithHttpInfoAsync(string assetAddress, string assetId, StatsRequestInput statsRequestInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'assetAddress' is set
            if (assetAddress == null)
                throw new BeamPlayerClient.Client.ApiException(400, "Missing required parameter 'assetAddress' when calling StatsApi->GetAssetStats");

            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new BeamPlayerClient.Client.ApiException(400, "Missing required parameter 'assetId' when calling StatsApi->GetAssetStats");

            // verify the required parameter 'statsRequestInput' is set
            if (statsRequestInput == null)
                throw new BeamPlayerClient.Client.ApiException(400, "Missing required parameter 'statsRequestInput' when calling StatsApi->GetAssetStats");


            BeamPlayerClient.Client.RequestOptions localVarRequestOptions = new BeamPlayerClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = BeamPlayerClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = BeamPlayerClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("assetAddress", BeamPlayerClient.Client.ClientUtils.ParameterToString(assetAddress)); // path parameter
            localVarRequestOptions.PathParameters.Add("assetId", BeamPlayerClient.Client.ClientUtils.ParameterToString(assetId)); // path parameter
            localVarRequestOptions.Data = statsRequestInput;

            // authentication (beam-api-key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<StatsResponse>("/v1/player/stats/{assetAddress}/assets/{assetId}", localVarRequestOptions, this.Configuration, cancellationToken);

            var localVarResponse = await task;

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAssetStats", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get assets stats 
        /// </summary>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetAddress"></param>
        /// <param name="statsRequestInput"></param>
        /// <returns>StatsResponse</returns>
        public StatsResponse GetAssetsStats(string assetAddress, StatsRequestInput statsRequestInput)
        {
            BeamPlayerClient.Client.ApiResponse<StatsResponse> localVarResponse = GetAssetsStatsWithHttpInfo(assetAddress, statsRequestInput);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get assets stats 
        /// </summary>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetAddress"></param>
        /// <param name="statsRequestInput"></param>
        /// <returns>ApiResponse of StatsResponse</returns>
        public BeamPlayerClient.Client.ApiResponse<StatsResponse> GetAssetsStatsWithHttpInfo(string assetAddress, StatsRequestInput statsRequestInput)
        {
            // verify the required parameter 'assetAddress' is set
            if (assetAddress == null)
                throw new BeamPlayerClient.Client.ApiException(400, "Missing required parameter 'assetAddress' when calling StatsApi->GetAssetsStats");

            // verify the required parameter 'statsRequestInput' is set
            if (statsRequestInput == null)
                throw new BeamPlayerClient.Client.ApiException(400, "Missing required parameter 'statsRequestInput' when calling StatsApi->GetAssetsStats");

            BeamPlayerClient.Client.RequestOptions localVarRequestOptions = new BeamPlayerClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BeamPlayerClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = BeamPlayerClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("assetAddress", BeamPlayerClient.Client.ClientUtils.ParameterToString(assetAddress)); // path parameter
            localVarRequestOptions.Data = statsRequestInput;

            // authentication (beam-api-key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<StatsResponse>("/v1/player/stats/{assetAddress}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAssetsStats", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get assets stats 
        /// </summary>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetAddress"></param>
        /// <param name="statsRequestInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StatsResponse</returns>
        public async Cysharp.Threading.Tasks.UniTask<StatsResponse> GetAssetsStatsAsync(string assetAddress, StatsRequestInput statsRequestInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = GetAssetsStatsWithHttpInfoAsync(assetAddress, statsRequestInput, cancellationToken);
            BeamPlayerClient.Client.ApiResponse<StatsResponse> localVarResponse = await task;
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get assets stats 
        /// </summary>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetAddress"></param>
        /// <param name="statsRequestInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StatsResponse)</returns>
        public async Cysharp.Threading.Tasks.UniTask<BeamPlayerClient.Client.ApiResponse<StatsResponse>> GetAssetsStatsWithHttpInfoAsync(string assetAddress, StatsRequestInput statsRequestInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'assetAddress' is set
            if (assetAddress == null)
                throw new BeamPlayerClient.Client.ApiException(400, "Missing required parameter 'assetAddress' when calling StatsApi->GetAssetsStats");

            // verify the required parameter 'statsRequestInput' is set
            if (statsRequestInput == null)
                throw new BeamPlayerClient.Client.ApiException(400, "Missing required parameter 'statsRequestInput' when calling StatsApi->GetAssetsStats");


            BeamPlayerClient.Client.RequestOptions localVarRequestOptions = new BeamPlayerClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = BeamPlayerClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = BeamPlayerClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("assetAddress", BeamPlayerClient.Client.ClientUtils.ParameterToString(assetAddress)); // path parameter
            localVarRequestOptions.Data = statsRequestInput;

            // authentication (beam-api-key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<StatsResponse>("/v1/player/stats/{assetAddress}", localVarRequestOptions, this.Configuration, cancellationToken);

            var localVarResponse = await task;

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAssetsStats", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
