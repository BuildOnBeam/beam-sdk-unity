/*
 * Player API
 *
 * The Player API is a service to integrate your game with Beam
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using BeamPlayerClient.Client;
using BeamPlayerClient.Model;

namespace BeamPlayerClient.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMarketplaceApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Accept an offer for an asset
        /// </summary>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="offerId"></param>
        /// <param name="acceptAssetOfferRequestInput"></param>
        /// <returns>CommonOperationResponse</returns>
        CommonOperationResponse AcceptAssetOffer(string entityId, string offerId, AcceptAssetOfferRequestInput acceptAssetOfferRequestInput);

        /// <summary>
        /// Accept an offer for an asset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="offerId"></param>
        /// <param name="acceptAssetOfferRequestInput"></param>
        /// <returns>ApiResponse of CommonOperationResponse</returns>
        ApiResponse<CommonOperationResponse> AcceptAssetOfferWithHttpInfo(string entityId, string offerId, AcceptAssetOfferRequestInput acceptAssetOfferRequestInput);
        /// <summary>
        /// Buy listed asset
        /// </summary>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="orderId"></param>
        /// <param name="buyAssetRequestInput"></param>
        /// <returns>CommonOperationResponse</returns>
        CommonOperationResponse BuyListedAsset(string entityId, string orderId, BuyAssetRequestInput buyAssetRequestInput);

        /// <summary>
        /// Buy listed asset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="orderId"></param>
        /// <param name="buyAssetRequestInput"></param>
        /// <returns>ApiResponse of CommonOperationResponse</returns>
        ApiResponse<CommonOperationResponse> BuyListedAssetWithHttpInfo(string entityId, string orderId, BuyAssetRequestInput buyAssetRequestInput);
        /// <summary>
        /// Cancel an offer for an asset
        /// </summary>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="offerId"></param>
        /// <param name="cancelAssetOfferRequestInput"></param>
        /// <returns>CommonOperationResponse</returns>
        CommonOperationResponse CancelAssetOffer(string entityId, string offerId, CancelAssetOfferRequestInput cancelAssetOfferRequestInput);

        /// <summary>
        /// Cancel an offer for an asset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="offerId"></param>
        /// <param name="cancelAssetOfferRequestInput"></param>
        /// <returns>ApiResponse of CommonOperationResponse</returns>
        ApiResponse<CommonOperationResponse> CancelAssetOfferWithHttpInfo(string entityId, string offerId, CancelAssetOfferRequestInput cancelAssetOfferRequestInput);
        /// <summary>
        /// Cancel asset listing
        /// </summary>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="orderId"></param>
        /// <param name="cancelAssetListingRequestInput"></param>
        /// <param name="chainId"> (optional)</param>
        /// <returns>CommonOperationResponse</returns>
        CommonOperationResponse CancelListing(string entityId, string orderId, CancelAssetListingRequestInput cancelAssetListingRequestInput, long? chainId);

        /// <summary>
        /// Cancel asset listing
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="orderId"></param>
        /// <param name="cancelAssetListingRequestInput"></param>
        /// <param name="chainId"> (optional)</param>
        /// <returns>ApiResponse of CommonOperationResponse</returns>
        ApiResponse<CommonOperationResponse> CancelListingWithHttpInfo(string entityId, string orderId, CancelAssetListingRequestInput cancelAssetListingRequestInput, long? chainId);
        /// <summary>
        /// Make an offer for an asset
        /// </summary>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="createAssetOfferRequestInput"></param>
        /// <returns>CommonOperationResponse</returns>
        CommonOperationResponse CreateAssetOffer(string entityId, CreateAssetOfferRequestInput createAssetOfferRequestInput);

        /// <summary>
        /// Make an offer for an asset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="createAssetOfferRequestInput"></param>
        /// <returns>ApiResponse of CommonOperationResponse</returns>
        ApiResponse<CommonOperationResponse> CreateAssetOfferWithHttpInfo(string entityId, CreateAssetOfferRequestInput createAssetOfferRequestInput);
        /// <summary>
        /// Get all offers for an asset
        /// </summary>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetAddress"></param>
        /// <param name="assetId"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="continuation"> (optional)</param>
        /// <returns>GetAssetListingsResponse</returns>
        GetAssetListingsResponse GetAssetOffers(string assetAddress, string assetId, long? chainId, string continuation);

        /// <summary>
        /// Get all offers for an asset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetAddress"></param>
        /// <param name="assetId"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="continuation"> (optional)</param>
        /// <returns>ApiResponse of GetAssetListingsResponse</returns>
        ApiResponse<GetAssetListingsResponse> GetAssetOffersWithHttpInfo(string assetAddress, string assetId, long? chainId, string continuation);
        /// <summary>
        /// Get available currencies for given chain
        /// </summary>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId"></param>
        /// <returns>GetChainCurrenciesResponse</returns>
        GetChainCurrenciesResponse GetChainCurrencies(long chainId);

        /// <summary>
        /// Get available currencies for given chain
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId"></param>
        /// <returns>ApiResponse of GetChainCurrenciesResponse</returns>
        ApiResponse<GetChainCurrenciesResponse> GetChainCurrenciesWithHttpInfo(long chainId);
        /// <summary>
        /// Get all listed assets for a game (NFT assets, e.g. ERC721 / ERC1155)
        /// </summary>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getListedAssetsBodyInput"></param>
        /// <returns>GetAssetListingsResponse</returns>
        GetAssetListingsResponse GetListedAssets(GetListedAssetsBodyInput getListedAssetsBodyInput);

        /// <summary>
        /// Get all listed assets for a game (NFT assets, e.g. ERC721 / ERC1155)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getListedAssetsBodyInput"></param>
        /// <returns>ApiResponse of GetAssetListingsResponse</returns>
        ApiResponse<GetAssetListingsResponse> GetListedAssetsWithHttpInfo(GetListedAssetsBodyInput getListedAssetsBodyInput);
        /// <summary>
        /// Get all the assets listed by a profile (NFT assets, e.g. ERC721 / ERC1155)
        /// </summary>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="getListedAssetsBodyInput"></param>
        /// <returns>GetAssetListingsResponse</returns>
        GetAssetListingsResponse GetListedAssetsForUser(string entityId, GetListedAssetsBodyInput getListedAssetsBodyInput);

        /// <summary>
        /// Get all the assets listed by a profile (NFT assets, e.g. ERC721 / ERC1155)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="getListedAssetsBodyInput"></param>
        /// <returns>ApiResponse of GetAssetListingsResponse</returns>
        ApiResponse<GetAssetListingsResponse> GetListedAssetsForUserWithHttpInfo(string entityId, GetListedAssetsBodyInput getListedAssetsBodyInput);
        /// <summary>
        /// Get all asset offers that a user created for a specific asset
        /// </summary>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="assetAddress"></param>
        /// <param name="assetId"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="continuation"> (optional)</param>
        /// <returns>GetAssetListingsResponse</returns>
        GetAssetListingsResponse GetUserAssetOffers(string entityId, string assetAddress, string assetId, long? chainId, string continuation);

        /// <summary>
        /// Get all asset offers that a user created for a specific asset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="assetAddress"></param>
        /// <param name="assetId"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="continuation"> (optional)</param>
        /// <returns>ApiResponse of GetAssetListingsResponse</returns>
        ApiResponse<GetAssetListingsResponse> GetUserAssetOffersWithHttpInfo(string entityId, string assetAddress, string assetId, long? chainId, string continuation);
        /// <summary>
        /// Get all offers that a user created
        /// </summary>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="continuation"> (optional)</param>
        /// <returns>GetAssetListingsResponse</returns>
        GetAssetListingsResponse GetUserOffers(string entityId, long? chainId, string continuation);

        /// <summary>
        /// Get all offers that a user created
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="continuation"> (optional)</param>
        /// <returns>ApiResponse of GetAssetListingsResponse</returns>
        ApiResponse<GetAssetListingsResponse> GetUserOffersWithHttpInfo(string entityId, long? chainId, string continuation);
        /// <summary>
        /// List an asset for sale
        /// </summary>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="sellAssetRequestInput"></param>
        /// <returns>CommonOperationResponse</returns>
        CommonOperationResponse ListAsset(string entityId, SellAssetRequestInput sellAssetRequestInput);

        /// <summary>
        /// List an asset for sale
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="sellAssetRequestInput"></param>
        /// <returns>ApiResponse of CommonOperationResponse</returns>
        ApiResponse<CommonOperationResponse> ListAssetWithHttpInfo(string entityId, SellAssetRequestInput sellAssetRequestInput);
        /// <summary>
        /// Schedule a contract refresh in the indexer
        /// </summary>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="refreshContractRequestBody"></param>
        /// <returns></returns>
        void RefreshContract(RefreshContractRequestBody refreshContractRequestBody);

        /// <summary>
        /// Schedule a contract refresh in the indexer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="refreshContractRequestBody"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RefreshContractWithHttpInfo(RefreshContractRequestBody refreshContractRequestBody);
        /// <summary>
        /// Schedule a token refresh in the indexer
        /// </summary>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="refreshTokenRequestBody"></param>
        /// <returns></returns>
        void RefreshToken(RefreshTokenRequestBody refreshTokenRequestBody);

        /// <summary>
        /// Schedule a token refresh in the indexer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="refreshTokenRequestBody"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RefreshTokenWithHttpInfo(RefreshTokenRequestBody refreshTokenRequestBody);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMarketplaceApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Accept an offer for an asset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="offerId"></param>
        /// <param name="acceptAssetOfferRequestInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CommonOperationResponse</returns>
        Cysharp.Threading.Tasks.UniTask<CommonOperationResponse> AcceptAssetOfferAsync(string entityId, string offerId, AcceptAssetOfferRequestInput acceptAssetOfferRequestInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Accept an offer for an asset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="offerId"></param>
        /// <param name="acceptAssetOfferRequestInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CommonOperationResponse)</returns>
        Cysharp.Threading.Tasks.UniTask<ApiResponse<CommonOperationResponse>> AcceptAssetOfferWithHttpInfoAsync(string entityId, string offerId, AcceptAssetOfferRequestInput acceptAssetOfferRequestInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Buy listed asset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="orderId"></param>
        /// <param name="buyAssetRequestInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CommonOperationResponse</returns>
        Cysharp.Threading.Tasks.UniTask<CommonOperationResponse> BuyListedAssetAsync(string entityId, string orderId, BuyAssetRequestInput buyAssetRequestInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Buy listed asset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="orderId"></param>
        /// <param name="buyAssetRequestInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CommonOperationResponse)</returns>
        Cysharp.Threading.Tasks.UniTask<ApiResponse<CommonOperationResponse>> BuyListedAssetWithHttpInfoAsync(string entityId, string orderId, BuyAssetRequestInput buyAssetRequestInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Cancel an offer for an asset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="offerId"></param>
        /// <param name="cancelAssetOfferRequestInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CommonOperationResponse</returns>
        Cysharp.Threading.Tasks.UniTask<CommonOperationResponse> CancelAssetOfferAsync(string entityId, string offerId, CancelAssetOfferRequestInput cancelAssetOfferRequestInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Cancel an offer for an asset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="offerId"></param>
        /// <param name="cancelAssetOfferRequestInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CommonOperationResponse)</returns>
        Cysharp.Threading.Tasks.UniTask<ApiResponse<CommonOperationResponse>> CancelAssetOfferWithHttpInfoAsync(string entityId, string offerId, CancelAssetOfferRequestInput cancelAssetOfferRequestInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Cancel asset listing
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="orderId"></param>
        /// <param name="cancelAssetListingRequestInput"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CommonOperationResponse</returns>
        Cysharp.Threading.Tasks.UniTask<CommonOperationResponse> CancelListingAsync(string entityId, string orderId, CancelAssetListingRequestInput cancelAssetListingRequestInput, long? chainId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Cancel asset listing
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="orderId"></param>
        /// <param name="cancelAssetListingRequestInput"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CommonOperationResponse)</returns>
        Cysharp.Threading.Tasks.UniTask<ApiResponse<CommonOperationResponse>> CancelListingWithHttpInfoAsync(string entityId, string orderId, CancelAssetListingRequestInput cancelAssetListingRequestInput, long? chainId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Make an offer for an asset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="createAssetOfferRequestInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CommonOperationResponse</returns>
        Cysharp.Threading.Tasks.UniTask<CommonOperationResponse> CreateAssetOfferAsync(string entityId, CreateAssetOfferRequestInput createAssetOfferRequestInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Make an offer for an asset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="createAssetOfferRequestInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CommonOperationResponse)</returns>
        Cysharp.Threading.Tasks.UniTask<ApiResponse<CommonOperationResponse>> CreateAssetOfferWithHttpInfoAsync(string entityId, CreateAssetOfferRequestInput createAssetOfferRequestInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get all offers for an asset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetAddress"></param>
        /// <param name="assetId"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="continuation"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetAssetListingsResponse</returns>
        Cysharp.Threading.Tasks.UniTask<GetAssetListingsResponse> GetAssetOffersAsync(string assetAddress, string assetId, long? chainId, string continuation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get all offers for an asset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetAddress"></param>
        /// <param name="assetId"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="continuation"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetAssetListingsResponse)</returns>
        Cysharp.Threading.Tasks.UniTask<ApiResponse<GetAssetListingsResponse>> GetAssetOffersWithHttpInfoAsync(string assetAddress, string assetId, long? chainId, string continuation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get available currencies for given chain
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetChainCurrenciesResponse</returns>
        Cysharp.Threading.Tasks.UniTask<GetChainCurrenciesResponse> GetChainCurrenciesAsync(long chainId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get available currencies for given chain
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetChainCurrenciesResponse)</returns>
        Cysharp.Threading.Tasks.UniTask<ApiResponse<GetChainCurrenciesResponse>> GetChainCurrenciesWithHttpInfoAsync(long chainId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get all listed assets for a game (NFT assets, e.g. ERC721 / ERC1155)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getListedAssetsBodyInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetAssetListingsResponse</returns>
        Cysharp.Threading.Tasks.UniTask<GetAssetListingsResponse> GetListedAssetsAsync(GetListedAssetsBodyInput getListedAssetsBodyInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get all listed assets for a game (NFT assets, e.g. ERC721 / ERC1155)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getListedAssetsBodyInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetAssetListingsResponse)</returns>
        Cysharp.Threading.Tasks.UniTask<ApiResponse<GetAssetListingsResponse>> GetListedAssetsWithHttpInfoAsync(GetListedAssetsBodyInput getListedAssetsBodyInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get all the assets listed by a profile (NFT assets, e.g. ERC721 / ERC1155)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="getListedAssetsBodyInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetAssetListingsResponse</returns>
        Cysharp.Threading.Tasks.UniTask<GetAssetListingsResponse> GetListedAssetsForUserAsync(string entityId, GetListedAssetsBodyInput getListedAssetsBodyInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get all the assets listed by a profile (NFT assets, e.g. ERC721 / ERC1155)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="getListedAssetsBodyInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetAssetListingsResponse)</returns>
        Cysharp.Threading.Tasks.UniTask<ApiResponse<GetAssetListingsResponse>> GetListedAssetsForUserWithHttpInfoAsync(string entityId, GetListedAssetsBodyInput getListedAssetsBodyInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get all asset offers that a user created for a specific asset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="assetAddress"></param>
        /// <param name="assetId"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="continuation"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetAssetListingsResponse</returns>
        Cysharp.Threading.Tasks.UniTask<GetAssetListingsResponse> GetUserAssetOffersAsync(string entityId, string assetAddress, string assetId, long? chainId, string continuation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get all asset offers that a user created for a specific asset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="assetAddress"></param>
        /// <param name="assetId"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="continuation"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetAssetListingsResponse)</returns>
        Cysharp.Threading.Tasks.UniTask<ApiResponse<GetAssetListingsResponse>> GetUserAssetOffersWithHttpInfoAsync(string entityId, string assetAddress, string assetId, long? chainId, string continuation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get all offers that a user created
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="continuation"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetAssetListingsResponse</returns>
        Cysharp.Threading.Tasks.UniTask<GetAssetListingsResponse> GetUserOffersAsync(string entityId, long? chainId, string continuation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get all offers that a user created
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="continuation"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetAssetListingsResponse)</returns>
        Cysharp.Threading.Tasks.UniTask<ApiResponse<GetAssetListingsResponse>> GetUserOffersWithHttpInfoAsync(string entityId, long? chainId, string continuation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List an asset for sale
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="sellAssetRequestInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CommonOperationResponse</returns>
        Cysharp.Threading.Tasks.UniTask<CommonOperationResponse> ListAssetAsync(string entityId, SellAssetRequestInput sellAssetRequestInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List an asset for sale
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="sellAssetRequestInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CommonOperationResponse)</returns>
        Cysharp.Threading.Tasks.UniTask<ApiResponse<CommonOperationResponse>> ListAssetWithHttpInfoAsync(string entityId, SellAssetRequestInput sellAssetRequestInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Schedule a contract refresh in the indexer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="refreshContractRequestBody"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Cysharp.Threading.Tasks.UniTask RefreshContractAsync(RefreshContractRequestBody refreshContractRequestBody, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Schedule a contract refresh in the indexer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="refreshContractRequestBody"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Cysharp.Threading.Tasks.UniTask<ApiResponse<Object>> RefreshContractWithHttpInfoAsync(RefreshContractRequestBody refreshContractRequestBody, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Schedule a token refresh in the indexer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="refreshTokenRequestBody"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Cysharp.Threading.Tasks.UniTask RefreshTokenAsync(RefreshTokenRequestBody refreshTokenRequestBody, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Schedule a token refresh in the indexer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="refreshTokenRequestBody"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Cysharp.Threading.Tasks.UniTask<ApiResponse<Object>> RefreshTokenWithHttpInfoAsync(RefreshTokenRequestBody refreshTokenRequestBody, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMarketplaceApi : IMarketplaceApiSync, IMarketplaceApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class MarketplaceApi : IDisposable, IMarketplaceApi
    {
        private BeamPlayerClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="MarketplaceApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public MarketplaceApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MarketplaceApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public MarketplaceApi(string basePath)
        {
            this.Configuration = BeamPlayerClient.Client.Configuration.MergeConfigurations(
                BeamPlayerClient.Client.GlobalConfiguration.Instance,
                new BeamPlayerClient.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new BeamPlayerClient.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = BeamPlayerClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MarketplaceApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public MarketplaceApi(BeamPlayerClient.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = BeamPlayerClient.Client.Configuration.MergeConfigurations(
                BeamPlayerClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new BeamPlayerClient.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = BeamPlayerClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MarketplaceApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public MarketplaceApi(BeamPlayerClient.Client.ISynchronousClient client, BeamPlayerClient.Client.IAsynchronousClient asyncClient, BeamPlayerClient.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = BeamPlayerClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public BeamPlayerClient.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public BeamPlayerClient.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public BeamPlayerClient.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public BeamPlayerClient.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public BeamPlayerClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Accept an offer for an asset 
        /// </summary>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="offerId"></param>
        /// <param name="acceptAssetOfferRequestInput"></param>
        /// <returns>CommonOperationResponse</returns>
        public CommonOperationResponse AcceptAssetOffer(string entityId, string offerId, AcceptAssetOfferRequestInput acceptAssetOfferRequestInput)
        {
            BeamPlayerClient.Client.ApiResponse<CommonOperationResponse> localVarResponse = AcceptAssetOfferWithHttpInfo(entityId, offerId, acceptAssetOfferRequestInput);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Accept an offer for an asset 
        /// </summary>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="offerId"></param>
        /// <param name="acceptAssetOfferRequestInput"></param>
        /// <returns>ApiResponse of CommonOperationResponse</returns>
        public BeamPlayerClient.Client.ApiResponse<CommonOperationResponse> AcceptAssetOfferWithHttpInfo(string entityId, string offerId, AcceptAssetOfferRequestInput acceptAssetOfferRequestInput)
        {
            // verify the required parameter 'entityId' is set
            if (entityId == null)
                throw new BeamPlayerClient.Client.ApiException(400, "Missing required parameter 'entityId' when calling MarketplaceApi->AcceptAssetOffer");

            // verify the required parameter 'offerId' is set
            if (offerId == null)
                throw new BeamPlayerClient.Client.ApiException(400, "Missing required parameter 'offerId' when calling MarketplaceApi->AcceptAssetOffer");

            // verify the required parameter 'acceptAssetOfferRequestInput' is set
            if (acceptAssetOfferRequestInput == null)
                throw new BeamPlayerClient.Client.ApiException(400, "Missing required parameter 'acceptAssetOfferRequestInput' when calling MarketplaceApi->AcceptAssetOffer");

            BeamPlayerClient.Client.RequestOptions localVarRequestOptions = new BeamPlayerClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BeamPlayerClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = BeamPlayerClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("entityId", BeamPlayerClient.Client.ClientUtils.ParameterToString(entityId)); // path parameter
            localVarRequestOptions.PathParameters.Add("offerId", BeamPlayerClient.Client.ClientUtils.ParameterToString(offerId)); // path parameter
            localVarRequestOptions.Data = acceptAssetOfferRequestInput;

            // authentication (beam-api-key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CommonOperationResponse>("/v1/player/marketplace/users/{entityId}/offers/{offerId}/accept", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AcceptAssetOffer", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Accept an offer for an asset 
        /// </summary>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="offerId"></param>
        /// <param name="acceptAssetOfferRequestInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CommonOperationResponse</returns>
        public async Cysharp.Threading.Tasks.UniTask<CommonOperationResponse> AcceptAssetOfferAsync(string entityId, string offerId, AcceptAssetOfferRequestInput acceptAssetOfferRequestInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = AcceptAssetOfferWithHttpInfoAsync(entityId, offerId, acceptAssetOfferRequestInput, cancellationToken);
            BeamPlayerClient.Client.ApiResponse<CommonOperationResponse> localVarResponse = await task;
            return localVarResponse.Data;
        }

        /// <summary>
        /// Accept an offer for an asset 
        /// </summary>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="offerId"></param>
        /// <param name="acceptAssetOfferRequestInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CommonOperationResponse)</returns>
        public async Cysharp.Threading.Tasks.UniTask<BeamPlayerClient.Client.ApiResponse<CommonOperationResponse>> AcceptAssetOfferWithHttpInfoAsync(string entityId, string offerId, AcceptAssetOfferRequestInput acceptAssetOfferRequestInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'entityId' is set
            if (entityId == null)
                throw new BeamPlayerClient.Client.ApiException(400, "Missing required parameter 'entityId' when calling MarketplaceApi->AcceptAssetOffer");

            // verify the required parameter 'offerId' is set
            if (offerId == null)
                throw new BeamPlayerClient.Client.ApiException(400, "Missing required parameter 'offerId' when calling MarketplaceApi->AcceptAssetOffer");

            // verify the required parameter 'acceptAssetOfferRequestInput' is set
            if (acceptAssetOfferRequestInput == null)
                throw new BeamPlayerClient.Client.ApiException(400, "Missing required parameter 'acceptAssetOfferRequestInput' when calling MarketplaceApi->AcceptAssetOffer");


            BeamPlayerClient.Client.RequestOptions localVarRequestOptions = new BeamPlayerClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = BeamPlayerClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = BeamPlayerClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("entityId", BeamPlayerClient.Client.ClientUtils.ParameterToString(entityId)); // path parameter
            localVarRequestOptions.PathParameters.Add("offerId", BeamPlayerClient.Client.ClientUtils.ParameterToString(offerId)); // path parameter
            localVarRequestOptions.Data = acceptAssetOfferRequestInput;

            // authentication (beam-api-key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<CommonOperationResponse>("/v1/player/marketplace/users/{entityId}/offers/{offerId}/accept", localVarRequestOptions, this.Configuration, cancellationToken);

            var localVarResponse = await task;

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AcceptAssetOffer", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Buy listed asset 
        /// </summary>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="orderId"></param>
        /// <param name="buyAssetRequestInput"></param>
        /// <returns>CommonOperationResponse</returns>
        public CommonOperationResponse BuyListedAsset(string entityId, string orderId, BuyAssetRequestInput buyAssetRequestInput)
        {
            BeamPlayerClient.Client.ApiResponse<CommonOperationResponse> localVarResponse = BuyListedAssetWithHttpInfo(entityId, orderId, buyAssetRequestInput);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Buy listed asset 
        /// </summary>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="orderId"></param>
        /// <param name="buyAssetRequestInput"></param>
        /// <returns>ApiResponse of CommonOperationResponse</returns>
        public BeamPlayerClient.Client.ApiResponse<CommonOperationResponse> BuyListedAssetWithHttpInfo(string entityId, string orderId, BuyAssetRequestInput buyAssetRequestInput)
        {
            // verify the required parameter 'entityId' is set
            if (entityId == null)
                throw new BeamPlayerClient.Client.ApiException(400, "Missing required parameter 'entityId' when calling MarketplaceApi->BuyListedAsset");

            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new BeamPlayerClient.Client.ApiException(400, "Missing required parameter 'orderId' when calling MarketplaceApi->BuyListedAsset");

            // verify the required parameter 'buyAssetRequestInput' is set
            if (buyAssetRequestInput == null)
                throw new BeamPlayerClient.Client.ApiException(400, "Missing required parameter 'buyAssetRequestInput' when calling MarketplaceApi->BuyListedAsset");

            BeamPlayerClient.Client.RequestOptions localVarRequestOptions = new BeamPlayerClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BeamPlayerClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = BeamPlayerClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("entityId", BeamPlayerClient.Client.ClientUtils.ParameterToString(entityId)); // path parameter
            localVarRequestOptions.PathParameters.Add("orderId", BeamPlayerClient.Client.ClientUtils.ParameterToString(orderId)); // path parameter
            localVarRequestOptions.Data = buyAssetRequestInput;

            // authentication (beam-api-key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CommonOperationResponse>("/v1/player/marketplace/users/{entityId}/listing/{orderId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BuyListedAsset", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Buy listed asset 
        /// </summary>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="orderId"></param>
        /// <param name="buyAssetRequestInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CommonOperationResponse</returns>
        public async Cysharp.Threading.Tasks.UniTask<CommonOperationResponse> BuyListedAssetAsync(string entityId, string orderId, BuyAssetRequestInput buyAssetRequestInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = BuyListedAssetWithHttpInfoAsync(entityId, orderId, buyAssetRequestInput, cancellationToken);
            BeamPlayerClient.Client.ApiResponse<CommonOperationResponse> localVarResponse = await task;
            return localVarResponse.Data;
        }

        /// <summary>
        /// Buy listed asset 
        /// </summary>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="orderId"></param>
        /// <param name="buyAssetRequestInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CommonOperationResponse)</returns>
        public async Cysharp.Threading.Tasks.UniTask<BeamPlayerClient.Client.ApiResponse<CommonOperationResponse>> BuyListedAssetWithHttpInfoAsync(string entityId, string orderId, BuyAssetRequestInput buyAssetRequestInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'entityId' is set
            if (entityId == null)
                throw new BeamPlayerClient.Client.ApiException(400, "Missing required parameter 'entityId' when calling MarketplaceApi->BuyListedAsset");

            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new BeamPlayerClient.Client.ApiException(400, "Missing required parameter 'orderId' when calling MarketplaceApi->BuyListedAsset");

            // verify the required parameter 'buyAssetRequestInput' is set
            if (buyAssetRequestInput == null)
                throw new BeamPlayerClient.Client.ApiException(400, "Missing required parameter 'buyAssetRequestInput' when calling MarketplaceApi->BuyListedAsset");


            BeamPlayerClient.Client.RequestOptions localVarRequestOptions = new BeamPlayerClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = BeamPlayerClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = BeamPlayerClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("entityId", BeamPlayerClient.Client.ClientUtils.ParameterToString(entityId)); // path parameter
            localVarRequestOptions.PathParameters.Add("orderId", BeamPlayerClient.Client.ClientUtils.ParameterToString(orderId)); // path parameter
            localVarRequestOptions.Data = buyAssetRequestInput;

            // authentication (beam-api-key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<CommonOperationResponse>("/v1/player/marketplace/users/{entityId}/listing/{orderId}", localVarRequestOptions, this.Configuration, cancellationToken);

            var localVarResponse = await task;

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BuyListedAsset", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Cancel an offer for an asset 
        /// </summary>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="offerId"></param>
        /// <param name="cancelAssetOfferRequestInput"></param>
        /// <returns>CommonOperationResponse</returns>
        public CommonOperationResponse CancelAssetOffer(string entityId, string offerId, CancelAssetOfferRequestInput cancelAssetOfferRequestInput)
        {
            BeamPlayerClient.Client.ApiResponse<CommonOperationResponse> localVarResponse = CancelAssetOfferWithHttpInfo(entityId, offerId, cancelAssetOfferRequestInput);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel an offer for an asset 
        /// </summary>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="offerId"></param>
        /// <param name="cancelAssetOfferRequestInput"></param>
        /// <returns>ApiResponse of CommonOperationResponse</returns>
        public BeamPlayerClient.Client.ApiResponse<CommonOperationResponse> CancelAssetOfferWithHttpInfo(string entityId, string offerId, CancelAssetOfferRequestInput cancelAssetOfferRequestInput)
        {
            // verify the required parameter 'entityId' is set
            if (entityId == null)
                throw new BeamPlayerClient.Client.ApiException(400, "Missing required parameter 'entityId' when calling MarketplaceApi->CancelAssetOffer");

            // verify the required parameter 'offerId' is set
            if (offerId == null)
                throw new BeamPlayerClient.Client.ApiException(400, "Missing required parameter 'offerId' when calling MarketplaceApi->CancelAssetOffer");

            // verify the required parameter 'cancelAssetOfferRequestInput' is set
            if (cancelAssetOfferRequestInput == null)
                throw new BeamPlayerClient.Client.ApiException(400, "Missing required parameter 'cancelAssetOfferRequestInput' when calling MarketplaceApi->CancelAssetOffer");

            BeamPlayerClient.Client.RequestOptions localVarRequestOptions = new BeamPlayerClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BeamPlayerClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = BeamPlayerClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("entityId", BeamPlayerClient.Client.ClientUtils.ParameterToString(entityId)); // path parameter
            localVarRequestOptions.PathParameters.Add("offerId", BeamPlayerClient.Client.ClientUtils.ParameterToString(offerId)); // path parameter
            localVarRequestOptions.Data = cancelAssetOfferRequestInput;

            // authentication (beam-api-key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<CommonOperationResponse>("/v1/player/marketplace/users/{entityId}/offers/{offerId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CancelAssetOffer", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Cancel an offer for an asset 
        /// </summary>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="offerId"></param>
        /// <param name="cancelAssetOfferRequestInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CommonOperationResponse</returns>
        public async Cysharp.Threading.Tasks.UniTask<CommonOperationResponse> CancelAssetOfferAsync(string entityId, string offerId, CancelAssetOfferRequestInput cancelAssetOfferRequestInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = CancelAssetOfferWithHttpInfoAsync(entityId, offerId, cancelAssetOfferRequestInput, cancellationToken);
            BeamPlayerClient.Client.ApiResponse<CommonOperationResponse> localVarResponse = await task;
            return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel an offer for an asset 
        /// </summary>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="offerId"></param>
        /// <param name="cancelAssetOfferRequestInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CommonOperationResponse)</returns>
        public async Cysharp.Threading.Tasks.UniTask<BeamPlayerClient.Client.ApiResponse<CommonOperationResponse>> CancelAssetOfferWithHttpInfoAsync(string entityId, string offerId, CancelAssetOfferRequestInput cancelAssetOfferRequestInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'entityId' is set
            if (entityId == null)
                throw new BeamPlayerClient.Client.ApiException(400, "Missing required parameter 'entityId' when calling MarketplaceApi->CancelAssetOffer");

            // verify the required parameter 'offerId' is set
            if (offerId == null)
                throw new BeamPlayerClient.Client.ApiException(400, "Missing required parameter 'offerId' when calling MarketplaceApi->CancelAssetOffer");

            // verify the required parameter 'cancelAssetOfferRequestInput' is set
            if (cancelAssetOfferRequestInput == null)
                throw new BeamPlayerClient.Client.ApiException(400, "Missing required parameter 'cancelAssetOfferRequestInput' when calling MarketplaceApi->CancelAssetOffer");


            BeamPlayerClient.Client.RequestOptions localVarRequestOptions = new BeamPlayerClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = BeamPlayerClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = BeamPlayerClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("entityId", BeamPlayerClient.Client.ClientUtils.ParameterToString(entityId)); // path parameter
            localVarRequestOptions.PathParameters.Add("offerId", BeamPlayerClient.Client.ClientUtils.ParameterToString(offerId)); // path parameter
            localVarRequestOptions.Data = cancelAssetOfferRequestInput;

            // authentication (beam-api-key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var task = this.AsynchronousClient.DeleteAsync<CommonOperationResponse>("/v1/player/marketplace/users/{entityId}/offers/{offerId}", localVarRequestOptions, this.Configuration, cancellationToken);

            var localVarResponse = await task;

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CancelAssetOffer", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Cancel asset listing 
        /// </summary>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="orderId"></param>
        /// <param name="cancelAssetListingRequestInput"></param>
        /// <param name="chainId"> (optional)</param>
        /// <returns>CommonOperationResponse</returns>
        public CommonOperationResponse CancelListing(string entityId, string orderId, CancelAssetListingRequestInput cancelAssetListingRequestInput, long? chainId)
        {
            BeamPlayerClient.Client.ApiResponse<CommonOperationResponse> localVarResponse = CancelListingWithHttpInfo(entityId, orderId, cancelAssetListingRequestInput, chainId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel asset listing 
        /// </summary>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="orderId"></param>
        /// <param name="cancelAssetListingRequestInput"></param>
        /// <param name="chainId"> (optional)</param>
        /// <returns>ApiResponse of CommonOperationResponse</returns>
        public BeamPlayerClient.Client.ApiResponse<CommonOperationResponse> CancelListingWithHttpInfo(string entityId, string orderId, CancelAssetListingRequestInput cancelAssetListingRequestInput, long? chainId)
        {
            // verify the required parameter 'entityId' is set
            if (entityId == null)
                throw new BeamPlayerClient.Client.ApiException(400, "Missing required parameter 'entityId' when calling MarketplaceApi->CancelListing");

            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new BeamPlayerClient.Client.ApiException(400, "Missing required parameter 'orderId' when calling MarketplaceApi->CancelListing");

            // verify the required parameter 'cancelAssetListingRequestInput' is set
            if (cancelAssetListingRequestInput == null)
                throw new BeamPlayerClient.Client.ApiException(400, "Missing required parameter 'cancelAssetListingRequestInput' when calling MarketplaceApi->CancelListing");

            BeamPlayerClient.Client.RequestOptions localVarRequestOptions = new BeamPlayerClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BeamPlayerClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = BeamPlayerClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("entityId", BeamPlayerClient.Client.ClientUtils.ParameterToString(entityId)); // path parameter
            localVarRequestOptions.PathParameters.Add("orderId", BeamPlayerClient.Client.ClientUtils.ParameterToString(orderId)); // path parameter
            if (chainId != null)
            {
                localVarRequestOptions.QueryParameters.Add(BeamPlayerClient.Client.ClientUtils.ParameterToMultiMap("", "chainId", chainId));
            }
            localVarRequestOptions.Data = cancelAssetListingRequestInput;

            // authentication (beam-api-key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<CommonOperationResponse>("/v1/player/marketplace/users/{entityId}/listing/{orderId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CancelListing", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Cancel asset listing 
        /// </summary>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="orderId"></param>
        /// <param name="cancelAssetListingRequestInput"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CommonOperationResponse</returns>
        public async Cysharp.Threading.Tasks.UniTask<CommonOperationResponse> CancelListingAsync(string entityId, string orderId, CancelAssetListingRequestInput cancelAssetListingRequestInput, long? chainId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = CancelListingWithHttpInfoAsync(entityId, orderId, cancelAssetListingRequestInput, chainId, cancellationToken);
            BeamPlayerClient.Client.ApiResponse<CommonOperationResponse> localVarResponse = await task;
            return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel asset listing 
        /// </summary>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="orderId"></param>
        /// <param name="cancelAssetListingRequestInput"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CommonOperationResponse)</returns>
        public async Cysharp.Threading.Tasks.UniTask<BeamPlayerClient.Client.ApiResponse<CommonOperationResponse>> CancelListingWithHttpInfoAsync(string entityId, string orderId, CancelAssetListingRequestInput cancelAssetListingRequestInput, long? chainId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'entityId' is set
            if (entityId == null)
                throw new BeamPlayerClient.Client.ApiException(400, "Missing required parameter 'entityId' when calling MarketplaceApi->CancelListing");

            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new BeamPlayerClient.Client.ApiException(400, "Missing required parameter 'orderId' when calling MarketplaceApi->CancelListing");

            // verify the required parameter 'cancelAssetListingRequestInput' is set
            if (cancelAssetListingRequestInput == null)
                throw new BeamPlayerClient.Client.ApiException(400, "Missing required parameter 'cancelAssetListingRequestInput' when calling MarketplaceApi->CancelListing");


            BeamPlayerClient.Client.RequestOptions localVarRequestOptions = new BeamPlayerClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = BeamPlayerClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = BeamPlayerClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("entityId", BeamPlayerClient.Client.ClientUtils.ParameterToString(entityId)); // path parameter
            localVarRequestOptions.PathParameters.Add("orderId", BeamPlayerClient.Client.ClientUtils.ParameterToString(orderId)); // path parameter
            if (chainId != null)
            {
                localVarRequestOptions.QueryParameters.Add(BeamPlayerClient.Client.ClientUtils.ParameterToMultiMap("", "chainId", chainId));
            }
            localVarRequestOptions.Data = cancelAssetListingRequestInput;

            // authentication (beam-api-key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var task = this.AsynchronousClient.DeleteAsync<CommonOperationResponse>("/v1/player/marketplace/users/{entityId}/listing/{orderId}", localVarRequestOptions, this.Configuration, cancellationToken);

            var localVarResponse = await task;

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CancelListing", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Make an offer for an asset 
        /// </summary>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="createAssetOfferRequestInput"></param>
        /// <returns>CommonOperationResponse</returns>
        public CommonOperationResponse CreateAssetOffer(string entityId, CreateAssetOfferRequestInput createAssetOfferRequestInput)
        {
            BeamPlayerClient.Client.ApiResponse<CommonOperationResponse> localVarResponse = CreateAssetOfferWithHttpInfo(entityId, createAssetOfferRequestInput);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Make an offer for an asset 
        /// </summary>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="createAssetOfferRequestInput"></param>
        /// <returns>ApiResponse of CommonOperationResponse</returns>
        public BeamPlayerClient.Client.ApiResponse<CommonOperationResponse> CreateAssetOfferWithHttpInfo(string entityId, CreateAssetOfferRequestInput createAssetOfferRequestInput)
        {
            // verify the required parameter 'entityId' is set
            if (entityId == null)
                throw new BeamPlayerClient.Client.ApiException(400, "Missing required parameter 'entityId' when calling MarketplaceApi->CreateAssetOffer");

            // verify the required parameter 'createAssetOfferRequestInput' is set
            if (createAssetOfferRequestInput == null)
                throw new BeamPlayerClient.Client.ApiException(400, "Missing required parameter 'createAssetOfferRequestInput' when calling MarketplaceApi->CreateAssetOffer");

            BeamPlayerClient.Client.RequestOptions localVarRequestOptions = new BeamPlayerClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BeamPlayerClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = BeamPlayerClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("entityId", BeamPlayerClient.Client.ClientUtils.ParameterToString(entityId)); // path parameter
            localVarRequestOptions.Data = createAssetOfferRequestInput;

            // authentication (beam-api-key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CommonOperationResponse>("/v1/player/marketplace/users/{entityId}/offers", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateAssetOffer", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Make an offer for an asset 
        /// </summary>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="createAssetOfferRequestInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CommonOperationResponse</returns>
        public async Cysharp.Threading.Tasks.UniTask<CommonOperationResponse> CreateAssetOfferAsync(string entityId, CreateAssetOfferRequestInput createAssetOfferRequestInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = CreateAssetOfferWithHttpInfoAsync(entityId, createAssetOfferRequestInput, cancellationToken);
            BeamPlayerClient.Client.ApiResponse<CommonOperationResponse> localVarResponse = await task;
            return localVarResponse.Data;
        }

        /// <summary>
        /// Make an offer for an asset 
        /// </summary>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="createAssetOfferRequestInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CommonOperationResponse)</returns>
        public async Cysharp.Threading.Tasks.UniTask<BeamPlayerClient.Client.ApiResponse<CommonOperationResponse>> CreateAssetOfferWithHttpInfoAsync(string entityId, CreateAssetOfferRequestInput createAssetOfferRequestInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'entityId' is set
            if (entityId == null)
                throw new BeamPlayerClient.Client.ApiException(400, "Missing required parameter 'entityId' when calling MarketplaceApi->CreateAssetOffer");

            // verify the required parameter 'createAssetOfferRequestInput' is set
            if (createAssetOfferRequestInput == null)
                throw new BeamPlayerClient.Client.ApiException(400, "Missing required parameter 'createAssetOfferRequestInput' when calling MarketplaceApi->CreateAssetOffer");


            BeamPlayerClient.Client.RequestOptions localVarRequestOptions = new BeamPlayerClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = BeamPlayerClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = BeamPlayerClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("entityId", BeamPlayerClient.Client.ClientUtils.ParameterToString(entityId)); // path parameter
            localVarRequestOptions.Data = createAssetOfferRequestInput;

            // authentication (beam-api-key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<CommonOperationResponse>("/v1/player/marketplace/users/{entityId}/offers", localVarRequestOptions, this.Configuration, cancellationToken);

            var localVarResponse = await task;

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateAssetOffer", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all offers for an asset 
        /// </summary>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetAddress"></param>
        /// <param name="assetId"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="continuation"> (optional)</param>
        /// <returns>GetAssetListingsResponse</returns>
        public GetAssetListingsResponse GetAssetOffers(string assetAddress, string assetId, long? chainId, string continuation)
        {
            BeamPlayerClient.Client.ApiResponse<GetAssetListingsResponse> localVarResponse = GetAssetOffersWithHttpInfo(assetAddress, assetId, chainId, continuation);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all offers for an asset 
        /// </summary>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetAddress"></param>
        /// <param name="assetId"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="continuation"> (optional)</param>
        /// <returns>ApiResponse of GetAssetListingsResponse</returns>
        public BeamPlayerClient.Client.ApiResponse<GetAssetListingsResponse> GetAssetOffersWithHttpInfo(string assetAddress, string assetId, long? chainId, string continuation)
        {
            // verify the required parameter 'assetAddress' is set
            if (assetAddress == null)
                throw new BeamPlayerClient.Client.ApiException(400, "Missing required parameter 'assetAddress' when calling MarketplaceApi->GetAssetOffers");

            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new BeamPlayerClient.Client.ApiException(400, "Missing required parameter 'assetId' when calling MarketplaceApi->GetAssetOffers");

            BeamPlayerClient.Client.RequestOptions localVarRequestOptions = new BeamPlayerClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BeamPlayerClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = BeamPlayerClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("assetAddress", BeamPlayerClient.Client.ClientUtils.ParameterToString(assetAddress)); // path parameter
            localVarRequestOptions.PathParameters.Add("assetId", BeamPlayerClient.Client.ClientUtils.ParameterToString(assetId)); // path parameter
            if (chainId != null)
            {
                localVarRequestOptions.QueryParameters.Add(BeamPlayerClient.Client.ClientUtils.ParameterToMultiMap("", "chainId", chainId));
            }
            if (continuation != null)
            {
                localVarRequestOptions.QueryParameters.Add(BeamPlayerClient.Client.ClientUtils.ParameterToMultiMap("", "continuation", continuation));
            }

            // authentication (beam-api-key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetAssetListingsResponse>("/v1/player/marketplace/offers/asset/{assetAddress}/{assetId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAssetOffers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all offers for an asset 
        /// </summary>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetAddress"></param>
        /// <param name="assetId"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="continuation"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetAssetListingsResponse</returns>
        public async Cysharp.Threading.Tasks.UniTask<GetAssetListingsResponse> GetAssetOffersAsync(string assetAddress, string assetId, long? chainId, string continuation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = GetAssetOffersWithHttpInfoAsync(assetAddress, assetId, chainId, continuation, cancellationToken);
            BeamPlayerClient.Client.ApiResponse<GetAssetListingsResponse> localVarResponse = await task;
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all offers for an asset 
        /// </summary>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetAddress"></param>
        /// <param name="assetId"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="continuation"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetAssetListingsResponse)</returns>
        public async Cysharp.Threading.Tasks.UniTask<BeamPlayerClient.Client.ApiResponse<GetAssetListingsResponse>> GetAssetOffersWithHttpInfoAsync(string assetAddress, string assetId, long? chainId, string continuation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'assetAddress' is set
            if (assetAddress == null)
                throw new BeamPlayerClient.Client.ApiException(400, "Missing required parameter 'assetAddress' when calling MarketplaceApi->GetAssetOffers");

            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new BeamPlayerClient.Client.ApiException(400, "Missing required parameter 'assetId' when calling MarketplaceApi->GetAssetOffers");


            BeamPlayerClient.Client.RequestOptions localVarRequestOptions = new BeamPlayerClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = BeamPlayerClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = BeamPlayerClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("assetAddress", BeamPlayerClient.Client.ClientUtils.ParameterToString(assetAddress)); // path parameter
            localVarRequestOptions.PathParameters.Add("assetId", BeamPlayerClient.Client.ClientUtils.ParameterToString(assetId)); // path parameter
            if (chainId != null)
            {
                localVarRequestOptions.QueryParameters.Add(BeamPlayerClient.Client.ClientUtils.ParameterToMultiMap("", "chainId", chainId));
            }
            if (continuation != null)
            {
                localVarRequestOptions.QueryParameters.Add(BeamPlayerClient.Client.ClientUtils.ParameterToMultiMap("", "continuation", continuation));
            }

            // authentication (beam-api-key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<GetAssetListingsResponse>("/v1/player/marketplace/offers/asset/{assetAddress}/{assetId}", localVarRequestOptions, this.Configuration, cancellationToken);

            var localVarResponse = await task;

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAssetOffers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get available currencies for given chain 
        /// </summary>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId"></param>
        /// <returns>GetChainCurrenciesResponse</returns>
        public GetChainCurrenciesResponse GetChainCurrencies(long chainId)
        {
            BeamPlayerClient.Client.ApiResponse<GetChainCurrenciesResponse> localVarResponse = GetChainCurrenciesWithHttpInfo(chainId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get available currencies for given chain 
        /// </summary>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId"></param>
        /// <returns>ApiResponse of GetChainCurrenciesResponse</returns>
        public BeamPlayerClient.Client.ApiResponse<GetChainCurrenciesResponse> GetChainCurrenciesWithHttpInfo(long chainId)
        {
            BeamPlayerClient.Client.RequestOptions localVarRequestOptions = new BeamPlayerClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BeamPlayerClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = BeamPlayerClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("chainId", BeamPlayerClient.Client.ClientUtils.ParameterToString(chainId)); // path parameter

            // authentication (beam-api-key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetChainCurrenciesResponse>("/v1/player/marketplace/chain-currencies/{chainId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetChainCurrencies", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get available currencies for given chain 
        /// </summary>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetChainCurrenciesResponse</returns>
        public async Cysharp.Threading.Tasks.UniTask<GetChainCurrenciesResponse> GetChainCurrenciesAsync(long chainId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = GetChainCurrenciesWithHttpInfoAsync(chainId, cancellationToken);
            BeamPlayerClient.Client.ApiResponse<GetChainCurrenciesResponse> localVarResponse = await task;
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get available currencies for given chain 
        /// </summary>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetChainCurrenciesResponse)</returns>
        public async Cysharp.Threading.Tasks.UniTask<BeamPlayerClient.Client.ApiResponse<GetChainCurrenciesResponse>> GetChainCurrenciesWithHttpInfoAsync(long chainId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            BeamPlayerClient.Client.RequestOptions localVarRequestOptions = new BeamPlayerClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = BeamPlayerClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = BeamPlayerClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("chainId", BeamPlayerClient.Client.ClientUtils.ParameterToString(chainId)); // path parameter

            // authentication (beam-api-key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<GetChainCurrenciesResponse>("/v1/player/marketplace/chain-currencies/{chainId}", localVarRequestOptions, this.Configuration, cancellationToken);

            var localVarResponse = await task;

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetChainCurrencies", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all listed assets for a game (NFT assets, e.g. ERC721 / ERC1155) 
        /// </summary>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getListedAssetsBodyInput"></param>
        /// <returns>GetAssetListingsResponse</returns>
        public GetAssetListingsResponse GetListedAssets(GetListedAssetsBodyInput getListedAssetsBodyInput)
        {
            BeamPlayerClient.Client.ApiResponse<GetAssetListingsResponse> localVarResponse = GetListedAssetsWithHttpInfo(getListedAssetsBodyInput);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all listed assets for a game (NFT assets, e.g. ERC721 / ERC1155) 
        /// </summary>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getListedAssetsBodyInput"></param>
        /// <returns>ApiResponse of GetAssetListingsResponse</returns>
        public BeamPlayerClient.Client.ApiResponse<GetAssetListingsResponse> GetListedAssetsWithHttpInfo(GetListedAssetsBodyInput getListedAssetsBodyInput)
        {
            // verify the required parameter 'getListedAssetsBodyInput' is set
            if (getListedAssetsBodyInput == null)
                throw new BeamPlayerClient.Client.ApiException(400, "Missing required parameter 'getListedAssetsBodyInput' when calling MarketplaceApi->GetListedAssets");

            BeamPlayerClient.Client.RequestOptions localVarRequestOptions = new BeamPlayerClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BeamPlayerClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = BeamPlayerClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = getListedAssetsBodyInput;

            // authentication (beam-api-key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<GetAssetListingsResponse>("/v1/player/marketplace", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetListedAssets", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all listed assets for a game (NFT assets, e.g. ERC721 / ERC1155) 
        /// </summary>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getListedAssetsBodyInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetAssetListingsResponse</returns>
        public async Cysharp.Threading.Tasks.UniTask<GetAssetListingsResponse> GetListedAssetsAsync(GetListedAssetsBodyInput getListedAssetsBodyInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = GetListedAssetsWithHttpInfoAsync(getListedAssetsBodyInput, cancellationToken);
            BeamPlayerClient.Client.ApiResponse<GetAssetListingsResponse> localVarResponse = await task;
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all listed assets for a game (NFT assets, e.g. ERC721 / ERC1155) 
        /// </summary>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getListedAssetsBodyInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetAssetListingsResponse)</returns>
        public async Cysharp.Threading.Tasks.UniTask<BeamPlayerClient.Client.ApiResponse<GetAssetListingsResponse>> GetListedAssetsWithHttpInfoAsync(GetListedAssetsBodyInput getListedAssetsBodyInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'getListedAssetsBodyInput' is set
            if (getListedAssetsBodyInput == null)
                throw new BeamPlayerClient.Client.ApiException(400, "Missing required parameter 'getListedAssetsBodyInput' when calling MarketplaceApi->GetListedAssets");


            BeamPlayerClient.Client.RequestOptions localVarRequestOptions = new BeamPlayerClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = BeamPlayerClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = BeamPlayerClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = getListedAssetsBodyInput;

            // authentication (beam-api-key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<GetAssetListingsResponse>("/v1/player/marketplace", localVarRequestOptions, this.Configuration, cancellationToken);

            var localVarResponse = await task;

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetListedAssets", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all the assets listed by a profile (NFT assets, e.g. ERC721 / ERC1155) 
        /// </summary>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="getListedAssetsBodyInput"></param>
        /// <returns>GetAssetListingsResponse</returns>
        public GetAssetListingsResponse GetListedAssetsForUser(string entityId, GetListedAssetsBodyInput getListedAssetsBodyInput)
        {
            BeamPlayerClient.Client.ApiResponse<GetAssetListingsResponse> localVarResponse = GetListedAssetsForUserWithHttpInfo(entityId, getListedAssetsBodyInput);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all the assets listed by a profile (NFT assets, e.g. ERC721 / ERC1155) 
        /// </summary>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="getListedAssetsBodyInput"></param>
        /// <returns>ApiResponse of GetAssetListingsResponse</returns>
        public BeamPlayerClient.Client.ApiResponse<GetAssetListingsResponse> GetListedAssetsForUserWithHttpInfo(string entityId, GetListedAssetsBodyInput getListedAssetsBodyInput)
        {
            // verify the required parameter 'entityId' is set
            if (entityId == null)
                throw new BeamPlayerClient.Client.ApiException(400, "Missing required parameter 'entityId' when calling MarketplaceApi->GetListedAssetsForUser");

            // verify the required parameter 'getListedAssetsBodyInput' is set
            if (getListedAssetsBodyInput == null)
                throw new BeamPlayerClient.Client.ApiException(400, "Missing required parameter 'getListedAssetsBodyInput' when calling MarketplaceApi->GetListedAssetsForUser");

            BeamPlayerClient.Client.RequestOptions localVarRequestOptions = new BeamPlayerClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BeamPlayerClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = BeamPlayerClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("entityId", BeamPlayerClient.Client.ClientUtils.ParameterToString(entityId)); // path parameter
            localVarRequestOptions.Data = getListedAssetsBodyInput;

            // authentication (beam-api-key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<GetAssetListingsResponse>("/v1/player/marketplace/users/{entityId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetListedAssetsForUser", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all the assets listed by a profile (NFT assets, e.g. ERC721 / ERC1155) 
        /// </summary>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="getListedAssetsBodyInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetAssetListingsResponse</returns>
        public async Cysharp.Threading.Tasks.UniTask<GetAssetListingsResponse> GetListedAssetsForUserAsync(string entityId, GetListedAssetsBodyInput getListedAssetsBodyInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = GetListedAssetsForUserWithHttpInfoAsync(entityId, getListedAssetsBodyInput, cancellationToken);
            BeamPlayerClient.Client.ApiResponse<GetAssetListingsResponse> localVarResponse = await task;
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all the assets listed by a profile (NFT assets, e.g. ERC721 / ERC1155) 
        /// </summary>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="getListedAssetsBodyInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetAssetListingsResponse)</returns>
        public async Cysharp.Threading.Tasks.UniTask<BeamPlayerClient.Client.ApiResponse<GetAssetListingsResponse>> GetListedAssetsForUserWithHttpInfoAsync(string entityId, GetListedAssetsBodyInput getListedAssetsBodyInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'entityId' is set
            if (entityId == null)
                throw new BeamPlayerClient.Client.ApiException(400, "Missing required parameter 'entityId' when calling MarketplaceApi->GetListedAssetsForUser");

            // verify the required parameter 'getListedAssetsBodyInput' is set
            if (getListedAssetsBodyInput == null)
                throw new BeamPlayerClient.Client.ApiException(400, "Missing required parameter 'getListedAssetsBodyInput' when calling MarketplaceApi->GetListedAssetsForUser");


            BeamPlayerClient.Client.RequestOptions localVarRequestOptions = new BeamPlayerClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = BeamPlayerClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = BeamPlayerClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("entityId", BeamPlayerClient.Client.ClientUtils.ParameterToString(entityId)); // path parameter
            localVarRequestOptions.Data = getListedAssetsBodyInput;

            // authentication (beam-api-key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<GetAssetListingsResponse>("/v1/player/marketplace/users/{entityId}", localVarRequestOptions, this.Configuration, cancellationToken);

            var localVarResponse = await task;

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetListedAssetsForUser", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all asset offers that a user created for a specific asset 
        /// </summary>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="assetAddress"></param>
        /// <param name="assetId"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="continuation"> (optional)</param>
        /// <returns>GetAssetListingsResponse</returns>
        public GetAssetListingsResponse GetUserAssetOffers(string entityId, string assetAddress, string assetId, long? chainId, string continuation)
        {
            BeamPlayerClient.Client.ApiResponse<GetAssetListingsResponse> localVarResponse = GetUserAssetOffersWithHttpInfo(entityId, assetAddress, assetId, chainId, continuation);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all asset offers that a user created for a specific asset 
        /// </summary>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="assetAddress"></param>
        /// <param name="assetId"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="continuation"> (optional)</param>
        /// <returns>ApiResponse of GetAssetListingsResponse</returns>
        public BeamPlayerClient.Client.ApiResponse<GetAssetListingsResponse> GetUserAssetOffersWithHttpInfo(string entityId, string assetAddress, string assetId, long? chainId, string continuation)
        {
            // verify the required parameter 'entityId' is set
            if (entityId == null)
                throw new BeamPlayerClient.Client.ApiException(400, "Missing required parameter 'entityId' when calling MarketplaceApi->GetUserAssetOffers");

            // verify the required parameter 'assetAddress' is set
            if (assetAddress == null)
                throw new BeamPlayerClient.Client.ApiException(400, "Missing required parameter 'assetAddress' when calling MarketplaceApi->GetUserAssetOffers");

            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new BeamPlayerClient.Client.ApiException(400, "Missing required parameter 'assetId' when calling MarketplaceApi->GetUserAssetOffers");

            BeamPlayerClient.Client.RequestOptions localVarRequestOptions = new BeamPlayerClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BeamPlayerClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = BeamPlayerClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("entityId", BeamPlayerClient.Client.ClientUtils.ParameterToString(entityId)); // path parameter
            localVarRequestOptions.PathParameters.Add("assetAddress", BeamPlayerClient.Client.ClientUtils.ParameterToString(assetAddress)); // path parameter
            localVarRequestOptions.PathParameters.Add("assetId", BeamPlayerClient.Client.ClientUtils.ParameterToString(assetId)); // path parameter
            if (chainId != null)
            {
                localVarRequestOptions.QueryParameters.Add(BeamPlayerClient.Client.ClientUtils.ParameterToMultiMap("", "chainId", chainId));
            }
            if (continuation != null)
            {
                localVarRequestOptions.QueryParameters.Add(BeamPlayerClient.Client.ClientUtils.ParameterToMultiMap("", "continuation", continuation));
            }

            // authentication (beam-api-key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetAssetListingsResponse>("/v1/player/marketplace/users/{entityId}/offers/asset/{assetAddress}/{assetId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUserAssetOffers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all asset offers that a user created for a specific asset 
        /// </summary>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="assetAddress"></param>
        /// <param name="assetId"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="continuation"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetAssetListingsResponse</returns>
        public async Cysharp.Threading.Tasks.UniTask<GetAssetListingsResponse> GetUserAssetOffersAsync(string entityId, string assetAddress, string assetId, long? chainId, string continuation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = GetUserAssetOffersWithHttpInfoAsync(entityId, assetAddress, assetId, chainId, continuation, cancellationToken);
            BeamPlayerClient.Client.ApiResponse<GetAssetListingsResponse> localVarResponse = await task;
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all asset offers that a user created for a specific asset 
        /// </summary>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="assetAddress"></param>
        /// <param name="assetId"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="continuation"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetAssetListingsResponse)</returns>
        public async Cysharp.Threading.Tasks.UniTask<BeamPlayerClient.Client.ApiResponse<GetAssetListingsResponse>> GetUserAssetOffersWithHttpInfoAsync(string entityId, string assetAddress, string assetId, long? chainId, string continuation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'entityId' is set
            if (entityId == null)
                throw new BeamPlayerClient.Client.ApiException(400, "Missing required parameter 'entityId' when calling MarketplaceApi->GetUserAssetOffers");

            // verify the required parameter 'assetAddress' is set
            if (assetAddress == null)
                throw new BeamPlayerClient.Client.ApiException(400, "Missing required parameter 'assetAddress' when calling MarketplaceApi->GetUserAssetOffers");

            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new BeamPlayerClient.Client.ApiException(400, "Missing required parameter 'assetId' when calling MarketplaceApi->GetUserAssetOffers");


            BeamPlayerClient.Client.RequestOptions localVarRequestOptions = new BeamPlayerClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = BeamPlayerClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = BeamPlayerClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("entityId", BeamPlayerClient.Client.ClientUtils.ParameterToString(entityId)); // path parameter
            localVarRequestOptions.PathParameters.Add("assetAddress", BeamPlayerClient.Client.ClientUtils.ParameterToString(assetAddress)); // path parameter
            localVarRequestOptions.PathParameters.Add("assetId", BeamPlayerClient.Client.ClientUtils.ParameterToString(assetId)); // path parameter
            if (chainId != null)
            {
                localVarRequestOptions.QueryParameters.Add(BeamPlayerClient.Client.ClientUtils.ParameterToMultiMap("", "chainId", chainId));
            }
            if (continuation != null)
            {
                localVarRequestOptions.QueryParameters.Add(BeamPlayerClient.Client.ClientUtils.ParameterToMultiMap("", "continuation", continuation));
            }

            // authentication (beam-api-key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<GetAssetListingsResponse>("/v1/player/marketplace/users/{entityId}/offers/asset/{assetAddress}/{assetId}", localVarRequestOptions, this.Configuration, cancellationToken);

            var localVarResponse = await task;

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUserAssetOffers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all offers that a user created 
        /// </summary>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="continuation"> (optional)</param>
        /// <returns>GetAssetListingsResponse</returns>
        public GetAssetListingsResponse GetUserOffers(string entityId, long? chainId, string continuation)
        {
            BeamPlayerClient.Client.ApiResponse<GetAssetListingsResponse> localVarResponse = GetUserOffersWithHttpInfo(entityId, chainId, continuation);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all offers that a user created 
        /// </summary>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="continuation"> (optional)</param>
        /// <returns>ApiResponse of GetAssetListingsResponse</returns>
        public BeamPlayerClient.Client.ApiResponse<GetAssetListingsResponse> GetUserOffersWithHttpInfo(string entityId, long? chainId, string continuation)
        {
            // verify the required parameter 'entityId' is set
            if (entityId == null)
                throw new BeamPlayerClient.Client.ApiException(400, "Missing required parameter 'entityId' when calling MarketplaceApi->GetUserOffers");

            BeamPlayerClient.Client.RequestOptions localVarRequestOptions = new BeamPlayerClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BeamPlayerClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = BeamPlayerClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("entityId", BeamPlayerClient.Client.ClientUtils.ParameterToString(entityId)); // path parameter
            if (chainId != null)
            {
                localVarRequestOptions.QueryParameters.Add(BeamPlayerClient.Client.ClientUtils.ParameterToMultiMap("", "chainId", chainId));
            }
            if (continuation != null)
            {
                localVarRequestOptions.QueryParameters.Add(BeamPlayerClient.Client.ClientUtils.ParameterToMultiMap("", "continuation", continuation));
            }

            // authentication (beam-api-key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetAssetListingsResponse>("/v1/player/marketplace/users/{entityId}/offers", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUserOffers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all offers that a user created 
        /// </summary>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="continuation"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetAssetListingsResponse</returns>
        public async Cysharp.Threading.Tasks.UniTask<GetAssetListingsResponse> GetUserOffersAsync(string entityId, long? chainId, string continuation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = GetUserOffersWithHttpInfoAsync(entityId, chainId, continuation, cancellationToken);
            BeamPlayerClient.Client.ApiResponse<GetAssetListingsResponse> localVarResponse = await task;
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all offers that a user created 
        /// </summary>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="continuation"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetAssetListingsResponse)</returns>
        public async Cysharp.Threading.Tasks.UniTask<BeamPlayerClient.Client.ApiResponse<GetAssetListingsResponse>> GetUserOffersWithHttpInfoAsync(string entityId, long? chainId, string continuation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'entityId' is set
            if (entityId == null)
                throw new BeamPlayerClient.Client.ApiException(400, "Missing required parameter 'entityId' when calling MarketplaceApi->GetUserOffers");


            BeamPlayerClient.Client.RequestOptions localVarRequestOptions = new BeamPlayerClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = BeamPlayerClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = BeamPlayerClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("entityId", BeamPlayerClient.Client.ClientUtils.ParameterToString(entityId)); // path parameter
            if (chainId != null)
            {
                localVarRequestOptions.QueryParameters.Add(BeamPlayerClient.Client.ClientUtils.ParameterToMultiMap("", "chainId", chainId));
            }
            if (continuation != null)
            {
                localVarRequestOptions.QueryParameters.Add(BeamPlayerClient.Client.ClientUtils.ParameterToMultiMap("", "continuation", continuation));
            }

            // authentication (beam-api-key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<GetAssetListingsResponse>("/v1/player/marketplace/users/{entityId}/offers", localVarRequestOptions, this.Configuration, cancellationToken);

            var localVarResponse = await task;

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUserOffers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List an asset for sale 
        /// </summary>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="sellAssetRequestInput"></param>
        /// <returns>CommonOperationResponse</returns>
        public CommonOperationResponse ListAsset(string entityId, SellAssetRequestInput sellAssetRequestInput)
        {
            BeamPlayerClient.Client.ApiResponse<CommonOperationResponse> localVarResponse = ListAssetWithHttpInfo(entityId, sellAssetRequestInput);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List an asset for sale 
        /// </summary>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="sellAssetRequestInput"></param>
        /// <returns>ApiResponse of CommonOperationResponse</returns>
        public BeamPlayerClient.Client.ApiResponse<CommonOperationResponse> ListAssetWithHttpInfo(string entityId, SellAssetRequestInput sellAssetRequestInput)
        {
            // verify the required parameter 'entityId' is set
            if (entityId == null)
                throw new BeamPlayerClient.Client.ApiException(400, "Missing required parameter 'entityId' when calling MarketplaceApi->ListAsset");

            // verify the required parameter 'sellAssetRequestInput' is set
            if (sellAssetRequestInput == null)
                throw new BeamPlayerClient.Client.ApiException(400, "Missing required parameter 'sellAssetRequestInput' when calling MarketplaceApi->ListAsset");

            BeamPlayerClient.Client.RequestOptions localVarRequestOptions = new BeamPlayerClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BeamPlayerClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = BeamPlayerClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("entityId", BeamPlayerClient.Client.ClientUtils.ParameterToString(entityId)); // path parameter
            localVarRequestOptions.Data = sellAssetRequestInput;

            // authentication (beam-api-key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CommonOperationResponse>("/v1/player/marketplace/users/{entityId}/listing", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListAsset", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List an asset for sale 
        /// </summary>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="sellAssetRequestInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CommonOperationResponse</returns>
        public async Cysharp.Threading.Tasks.UniTask<CommonOperationResponse> ListAssetAsync(string entityId, SellAssetRequestInput sellAssetRequestInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = ListAssetWithHttpInfoAsync(entityId, sellAssetRequestInput, cancellationToken);
            BeamPlayerClient.Client.ApiResponse<CommonOperationResponse> localVarResponse = await task;
            return localVarResponse.Data;
        }

        /// <summary>
        /// List an asset for sale 
        /// </summary>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="sellAssetRequestInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CommonOperationResponse)</returns>
        public async Cysharp.Threading.Tasks.UniTask<BeamPlayerClient.Client.ApiResponse<CommonOperationResponse>> ListAssetWithHttpInfoAsync(string entityId, SellAssetRequestInput sellAssetRequestInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'entityId' is set
            if (entityId == null)
                throw new BeamPlayerClient.Client.ApiException(400, "Missing required parameter 'entityId' when calling MarketplaceApi->ListAsset");

            // verify the required parameter 'sellAssetRequestInput' is set
            if (sellAssetRequestInput == null)
                throw new BeamPlayerClient.Client.ApiException(400, "Missing required parameter 'sellAssetRequestInput' when calling MarketplaceApi->ListAsset");


            BeamPlayerClient.Client.RequestOptions localVarRequestOptions = new BeamPlayerClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = BeamPlayerClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = BeamPlayerClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("entityId", BeamPlayerClient.Client.ClientUtils.ParameterToString(entityId)); // path parameter
            localVarRequestOptions.Data = sellAssetRequestInput;

            // authentication (beam-api-key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<CommonOperationResponse>("/v1/player/marketplace/users/{entityId}/listing", localVarRequestOptions, this.Configuration, cancellationToken);

            var localVarResponse = await task;

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListAsset", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Schedule a contract refresh in the indexer 
        /// </summary>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="refreshContractRequestBody"></param>
        /// <returns></returns>
        public void RefreshContract(RefreshContractRequestBody refreshContractRequestBody)
        {
            RefreshContractWithHttpInfo(refreshContractRequestBody);
        }

        /// <summary>
        /// Schedule a contract refresh in the indexer 
        /// </summary>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="refreshContractRequestBody"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public BeamPlayerClient.Client.ApiResponse<Object> RefreshContractWithHttpInfo(RefreshContractRequestBody refreshContractRequestBody)
        {
            // verify the required parameter 'refreshContractRequestBody' is set
            if (refreshContractRequestBody == null)
                throw new BeamPlayerClient.Client.ApiException(400, "Missing required parameter 'refreshContractRequestBody' when calling MarketplaceApi->RefreshContract");

            BeamPlayerClient.Client.RequestOptions localVarRequestOptions = new BeamPlayerClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = BeamPlayerClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = BeamPlayerClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = refreshContractRequestBody;

            // authentication (beam-api-key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/v1/player/marketplace/refresh/contract", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RefreshContract", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Schedule a contract refresh in the indexer 
        /// </summary>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="refreshContractRequestBody"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Cysharp.Threading.Tasks.UniTask RefreshContractAsync(RefreshContractRequestBody refreshContractRequestBody, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = RefreshContractWithHttpInfoAsync(refreshContractRequestBody, cancellationToken);
            await task;
        }

        /// <summary>
        /// Schedule a contract refresh in the indexer 
        /// </summary>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="refreshContractRequestBody"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Cysharp.Threading.Tasks.UniTask<BeamPlayerClient.Client.ApiResponse<Object>> RefreshContractWithHttpInfoAsync(RefreshContractRequestBody refreshContractRequestBody, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'refreshContractRequestBody' is set
            if (refreshContractRequestBody == null)
                throw new BeamPlayerClient.Client.ApiException(400, "Missing required parameter 'refreshContractRequestBody' when calling MarketplaceApi->RefreshContract");


            BeamPlayerClient.Client.RequestOptions localVarRequestOptions = new BeamPlayerClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = BeamPlayerClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = BeamPlayerClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = refreshContractRequestBody;

            // authentication (beam-api-key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<Object>("/v1/player/marketplace/refresh/contract", localVarRequestOptions, this.Configuration, cancellationToken);

            var localVarResponse = await task;

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RefreshContract", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Schedule a token refresh in the indexer 
        /// </summary>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="refreshTokenRequestBody"></param>
        /// <returns></returns>
        public void RefreshToken(RefreshTokenRequestBody refreshTokenRequestBody)
        {
            RefreshTokenWithHttpInfo(refreshTokenRequestBody);
        }

        /// <summary>
        /// Schedule a token refresh in the indexer 
        /// </summary>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="refreshTokenRequestBody"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public BeamPlayerClient.Client.ApiResponse<Object> RefreshTokenWithHttpInfo(RefreshTokenRequestBody refreshTokenRequestBody)
        {
            // verify the required parameter 'refreshTokenRequestBody' is set
            if (refreshTokenRequestBody == null)
                throw new BeamPlayerClient.Client.ApiException(400, "Missing required parameter 'refreshTokenRequestBody' when calling MarketplaceApi->RefreshToken");

            BeamPlayerClient.Client.RequestOptions localVarRequestOptions = new BeamPlayerClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = BeamPlayerClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = BeamPlayerClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = refreshTokenRequestBody;

            // authentication (beam-api-key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/v1/player/marketplace/refresh/token", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RefreshToken", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Schedule a token refresh in the indexer 
        /// </summary>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="refreshTokenRequestBody"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Cysharp.Threading.Tasks.UniTask RefreshTokenAsync(RefreshTokenRequestBody refreshTokenRequestBody, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = RefreshTokenWithHttpInfoAsync(refreshTokenRequestBody, cancellationToken);
            await task;
        }

        /// <summary>
        /// Schedule a token refresh in the indexer 
        /// </summary>
        /// <exception cref="BeamPlayerClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="refreshTokenRequestBody"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Cysharp.Threading.Tasks.UniTask<BeamPlayerClient.Client.ApiResponse<Object>> RefreshTokenWithHttpInfoAsync(RefreshTokenRequestBody refreshTokenRequestBody, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'refreshTokenRequestBody' is set
            if (refreshTokenRequestBody == null)
                throw new BeamPlayerClient.Client.ApiException(400, "Missing required parameter 'refreshTokenRequestBody' when calling MarketplaceApi->RefreshToken");


            BeamPlayerClient.Client.RequestOptions localVarRequestOptions = new BeamPlayerClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = BeamPlayerClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = BeamPlayerClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = refreshTokenRequestBody;

            // authentication (beam-api-key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<Object>("/v1/player/marketplace/refresh/token", localVarRequestOptions, this.Configuration, cancellationToken);

            var localVarResponse = await task;

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RefreshToken", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
