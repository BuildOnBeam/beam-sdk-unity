/*
 * Player API
 *
 * The Player API is a service to integrate your game with Beam
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = BeamPlayerClient.Client.OpenAPIDateConverter;

namespace BeamPlayerClient.Model
{
    /// <summary>
    /// ContextTransferNFTsAssetsInner
    /// </summary>
    [DataContract(Name = "ContextTransferNFTs_assets_inner")]
    [UnityEngine.Scripting.Preserve]
    public partial class ContextTransferNFTsAssetsInner
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ContextTransferNFTsAssetsInner" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ContextTransferNFTsAssetsInner() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ContextTransferNFTsAssetsInner" /> class.
        /// </summary>
        /// <param name="receiverAddress">receiverAddress (required).</param>
        /// <param name="contractAddress">contractAddress (required).</param>
        /// <param name="assetId">assetId (required).</param>
        /// <param name="amount">amount (required).</param>
        [UnityEngine.Scripting.Preserve]
        public ContextTransferNFTsAssetsInner(string receiverAddress = default(string), string contractAddress = default(string), string assetId = default(string), decimal amount = default(decimal))
        {
            // to ensure "receiverAddress" is required (not null)
            if (receiverAddress == null)
            {
                throw new ArgumentNullException("receiverAddress is a required property for ContextTransferNFTsAssetsInner and cannot be null");
            }
            this.ReceiverAddress = receiverAddress;
            // to ensure "contractAddress" is required (not null)
            if (contractAddress == null)
            {
                throw new ArgumentNullException("contractAddress is a required property for ContextTransferNFTsAssetsInner and cannot be null");
            }
            this.ContractAddress = contractAddress;
            // to ensure "assetId" is required (not null)
            if (assetId == null)
            {
                throw new ArgumentNullException("assetId is a required property for ContextTransferNFTsAssetsInner and cannot be null");
            }
            this.AssetId = assetId;
            this.Amount = amount;
        }

        /// <summary>
        /// Gets or Sets ReceiverAddress
        /// </summary>
        [DataMember(Name = "receiverAddress", IsRequired = true, EmitDefaultValue = true)]
        [UnityEngine.Scripting.Preserve]
        public string ReceiverAddress { get; set; }

        /// <summary>
        /// Gets or Sets ContractAddress
        /// </summary>
        [DataMember(Name = "contractAddress", IsRequired = true, EmitDefaultValue = true)]
        [UnityEngine.Scripting.Preserve]
        public string ContractAddress { get; set; }

        /// <summary>
        /// Gets or Sets AssetId
        /// </summary>
        [DataMember(Name = "assetId", IsRequired = true, EmitDefaultValue = true)]
        [UnityEngine.Scripting.Preserve]
        public string AssetId { get; set; }

        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [DataMember(Name = "amount", IsRequired = true, EmitDefaultValue = true)]
        [UnityEngine.Scripting.Preserve]
        public decimal Amount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        [UnityEngine.Scripting.Preserve]
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ContextTransferNFTsAssetsInner {\n");
            sb.Append("  ReceiverAddress: ").Append(ReceiverAddress).Append("\n");
            sb.Append("  ContractAddress: ").Append(ContractAddress).Append("\n");
            sb.Append("  AssetId: ").Append(AssetId).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        [UnityEngine.Scripting.Preserve]
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
