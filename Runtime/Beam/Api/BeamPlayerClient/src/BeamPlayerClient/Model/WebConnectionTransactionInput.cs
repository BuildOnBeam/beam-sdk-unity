/*
 * Player API
 *
 * The Player API is a service to integrate your game with Beam
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = BeamPlayerClient.Client.OpenAPIDateConverter;

namespace BeamPlayerClient.Model
{
    /// <summary>
    /// WebConnectionTransactionInput
    /// </summary>
    [DataContract(Name = "WebConnectionTransactionInput")]
    public partial class WebConnectionTransactionInput
    {
        /// <summary>
        /// Defines OperationProcessing
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum OperationProcessingEnum
        {
            /// <summary>
            /// Enum SignOnly for value: SignOnly
            /// </summary>
            [EnumMember(Value = "SignOnly")]
            SignOnly = 1,

            /// <summary>
            /// Enum Execute for value: Execute
            /// </summary>
            [EnumMember(Value = "Execute")]
            Execute = 2
        }


        /// <summary>
        /// Gets or Sets OperationProcessing
        /// </summary>
        [DataMember(Name = "operationProcessing", EmitDefaultValue = false)]
        public OperationProcessingEnum? OperationProcessing { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="WebConnectionTransactionInput" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected WebConnectionTransactionInput() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="WebConnectionTransactionInput" /> class.
        /// </summary>
        /// <param name="accountAddress">accountAddress (required).</param>
        /// <param name="operationId">operationId.</param>
        /// <param name="operationProcessing">operationProcessing (default to OperationProcessingEnum.Execute).</param>
        /// <param name="interactions">interactions (required).</param>
        /// <param name="chainId">chainId (default to 13337M).</param>
        public WebConnectionTransactionInput(string accountAddress = default(string), string operationId = default(string), OperationProcessingEnum? operationProcessing = OperationProcessingEnum.Execute, List<WebConnectionTransactionInputInteractionsInner> interactions = default(List<WebConnectionTransactionInputInteractionsInner>), decimal chainId = 13337M)
        {
            // to ensure "accountAddress" is required (not null)
            if (accountAddress == null)
            {
                throw new ArgumentNullException("accountAddress is a required property for WebConnectionTransactionInput and cannot be null");
            }
            this.AccountAddress = accountAddress;
            // to ensure "interactions" is required (not null)
            if (interactions == null)
            {
                throw new ArgumentNullException("interactions is a required property for WebConnectionTransactionInput and cannot be null");
            }
            this.Interactions = interactions;
            this.OperationId = operationId;
            this.OperationProcessing = operationProcessing;
            this.ChainId = chainId;
        }

        /// <summary>
        /// Gets or Sets AccountAddress
        /// </summary>
        [DataMember(Name = "accountAddress", IsRequired = true, EmitDefaultValue = true)]
        public string AccountAddress { get; set; }

        /// <summary>
        /// Gets or Sets OperationId
        /// </summary>
        [DataMember(Name = "operationId", EmitDefaultValue = true)]
        public string OperationId { get; set; }

        /// <summary>
        /// Gets or Sets Interactions
        /// </summary>
        [DataMember(Name = "interactions", IsRequired = true, EmitDefaultValue = true)]
        public List<WebConnectionTransactionInputInteractionsInner> Interactions { get; set; }

        /// <summary>
        /// Gets or Sets ChainId
        /// </summary>
        [DataMember(Name = "chainId", EmitDefaultValue = false)]
        public decimal ChainId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WebConnectionTransactionInput {\n");
            sb.Append("  AccountAddress: ").Append(AccountAddress).Append("\n");
            sb.Append("  OperationId: ").Append(OperationId).Append("\n");
            sb.Append("  OperationProcessing: ").Append(OperationProcessing).Append("\n");
            sb.Append("  Interactions: ").Append(Interactions).Append("\n");
            sb.Append("  ChainId: ").Append(ChainId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
