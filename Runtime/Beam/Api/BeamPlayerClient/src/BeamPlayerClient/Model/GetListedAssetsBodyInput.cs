/*
 * Player API
 *
 * The Player API is a service to integrate your game with Beam
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = BeamPlayerClient.Client.OpenAPIDateConverter;

namespace BeamPlayerClient.Model
{
    /// <summary>
    /// GetListedAssetsBodyInput
    /// </summary>
    [DataContract(Name = "GetListedAssetsBodyInput")]
    [UnityEngine.Scripting.Preserve]
    public partial class GetListedAssetsBodyInput
    {
        /// <summary>
        /// Defines SortBy
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SortByEnum
        {
            /// <summary>
            /// Enum CreatedAt for value: createdAt
            /// </summary>
            [EnumMember(Value = "createdAt")]
            CreatedAt = 1,

            /// <summary>
            /// Enum UpdatedAt for value: updatedAt
            /// </summary>
            [EnumMember(Value = "updatedAt")]
            UpdatedAt = 2,

            /// <summary>
            /// Enum Price for value: price
            /// </summary>
            [EnumMember(Value = "price")]
            Price = 3
        }


        /// <summary>
        /// Gets or Sets SortBy
        /// </summary>
        [DataMember(Name = "sortBy", EmitDefaultValue = false)]
        [UnityEngine.Scripting.Preserve]
        public SortByEnum? SortBy { get; set; }
        /// <summary>
        /// If using &#x60;createdAt&#x60; for sorting, only &#x60;desc&#x60; is allowed.
        /// </summary>
        /// <value>If using &#x60;createdAt&#x60; for sorting, only &#x60;desc&#x60; is allowed.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SortDirectionEnum
        {
            /// <summary>
            /// Enum Asc for value: asc
            /// </summary>
            [EnumMember(Value = "asc")]
            Asc = 1,

            /// <summary>
            /// Enum Desc for value: desc
            /// </summary>
            [EnumMember(Value = "desc")]
            Desc = 2
        }


        /// <summary>
        /// If using &#x60;createdAt&#x60; for sorting, only &#x60;desc&#x60; is allowed.
        /// </summary>
        /// <value>If using &#x60;createdAt&#x60; for sorting, only &#x60;desc&#x60; is allowed.</value>
        [DataMember(Name = "sortDirection", EmitDefaultValue = false)]
        [UnityEngine.Scripting.Preserve]
        public SortDirectionEnum? SortDirection { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetListedAssetsBodyInput" /> class.
        /// </summary>
        /// <param name="assetAddresses">assetAddresses.</param>
        /// <param name="sortBy">sortBy (default to SortByEnum.CreatedAt).</param>
        /// <param name="sortDirection">If using &#x60;createdAt&#x60; for sorting, only &#x60;desc&#x60; is allowed. (default to SortDirectionEnum.Desc).</param>
        /// <param name="limit">limit (default to 50).</param>
        /// <param name="chainId">chainId (default to 13337M).</param>
        /// <param name="continuation">continuation.</param>
        [UnityEngine.Scripting.Preserve]
        public GetListedAssetsBodyInput(List<string> assetAddresses = default(List<string>), SortByEnum? sortBy = SortByEnum.CreatedAt, SortDirectionEnum? sortDirection = SortDirectionEnum.Desc, int limit = 50, decimal chainId = 13337M, string continuation = default(string))
        {
            this.AssetAddresses = assetAddresses;
            this.SortBy = sortBy;
            this.SortDirection = sortDirection;
            this.Limit = limit;
            this.ChainId = chainId;
            this.Continuation = continuation;
        }

        /// <summary>
        /// Gets or Sets AssetAddresses
        /// </summary>
        [DataMember(Name = "assetAddresses", EmitDefaultValue = true)]
        [UnityEngine.Scripting.Preserve]
        public List<string> AssetAddresses { get; set; }

        /// <summary>
        /// Gets or Sets Limit
        /// </summary>
        [DataMember(Name = "limit", EmitDefaultValue = false)]
        [UnityEngine.Scripting.Preserve]
        public int Limit { get; set; }

        /// <summary>
        /// Gets or Sets ChainId
        /// </summary>
        [DataMember(Name = "chainId", EmitDefaultValue = false)]
        [UnityEngine.Scripting.Preserve]
        public decimal ChainId { get; set; }

        /// <summary>
        /// Gets or Sets Continuation
        /// </summary>
        [DataMember(Name = "continuation", EmitDefaultValue = true)]
        [UnityEngine.Scripting.Preserve]
        public string Continuation { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        [UnityEngine.Scripting.Preserve]
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetListedAssetsBodyInput {\n");
            sb.Append("  AssetAddresses: ").Append(AssetAddresses).Append("\n");
            sb.Append("  SortBy: ").Append(SortBy).Append("\n");
            sb.Append("  SortDirection: ").Append(SortDirection).Append("\n");
            sb.Append("  Limit: ").Append(Limit).Append("\n");
            sb.Append("  ChainId: ").Append(ChainId).Append("\n");
            sb.Append("  Continuation: ").Append(Continuation).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        [UnityEngine.Scripting.Preserve]
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
