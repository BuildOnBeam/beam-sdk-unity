/*
 * Player API
 *
 * The Player API is a service to integrate your game with Beam
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = BeamPlayerClient.Client.OpenAPIDateConverter;

namespace BeamPlayerClient.Model
{
    /// <summary>
    /// BeamErrorResponse
    /// </summary>
    [DataContract(Name = "BeamErrorResponse")]
    [UnityEngine.Scripting.Preserve]
    public partial class BeamErrorResponse
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BeamErrorResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected BeamErrorResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="BeamErrorResponse" /> class.
        /// </summary>
        /// <param name="path">path (required).</param>
        /// <param name="timestamp">timestamp (required).</param>
        /// <param name="status">status (required).</param>
        /// <param name="error">error.</param>
        /// <param name="validation">validation.</param>
        /// <param name="type">type.</param>
        /// <param name="message">message.</param>
        /// <param name="traceId">traceId.</param>
        [UnityEngine.Scripting.Preserve]
        public BeamErrorResponse(string path = default(string), DateTime timestamp = default(DateTime), int status = default(int), string error = default(string), List<Object> validation = default(List<Object>), string type = default(string), string message = default(string), string traceId = default(string))
        {
            // to ensure "path" is required (not null)
            if (path == null)
            {
                throw new ArgumentNullException("path is a required property for BeamErrorResponse and cannot be null");
            }
            this.Path = path;
            this.Timestamp = timestamp;
            this.Status = status;
            this.Error = error;
            this.Validation = validation;
            this.Type = type;
            this.Message = message;
            this.TraceId = traceId;
        }

        /// <summary>
        /// Gets or Sets Path
        /// </summary>
        [DataMember(Name = "path", IsRequired = true, EmitDefaultValue = true)]
        [UnityEngine.Scripting.Preserve]
        public string Path { get; set; }

        /// <summary>
        /// Gets or Sets Timestamp
        /// </summary>
        [DataMember(Name = "timestamp", IsRequired = true, EmitDefaultValue = true)]
        [UnityEngine.Scripting.Preserve]
        public DateTime Timestamp { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", IsRequired = true, EmitDefaultValue = true)]
        [UnityEngine.Scripting.Preserve]
        public int Status { get; set; }

        /// <summary>
        /// Gets or Sets Error
        /// </summary>
        [DataMember(Name = "error", EmitDefaultValue = false)]
        [UnityEngine.Scripting.Preserve]
        public string Error { get; set; }

        /// <summary>
        /// Gets or Sets Validation
        /// </summary>
        [DataMember(Name = "validation", EmitDefaultValue = false)]
        [UnityEngine.Scripting.Preserve]
        public List<Object> Validation { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        [UnityEngine.Scripting.Preserve]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets Message
        /// </summary>
        [DataMember(Name = "message", EmitDefaultValue = false)]
        [UnityEngine.Scripting.Preserve]
        public string Message { get; set; }

        /// <summary>
        /// Gets or Sets TraceId
        /// </summary>
        [DataMember(Name = "traceId", EmitDefaultValue = false)]
        [UnityEngine.Scripting.Preserve]
        public string TraceId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        [UnityEngine.Scripting.Preserve]
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BeamErrorResponse {\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Error: ").Append(Error).Append("\n");
            sb.Append("  Validation: ").Append(Validation).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  TraceId: ").Append(TraceId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        [UnityEngine.Scripting.Preserve]
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
