/*
 * Player API
 *
 * The Player API is a service to integrate your game with Beam
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = BeamPlayerClient.Client.OpenAPIDateConverter;

namespace BeamPlayerClient.Model
{
    /// <summary>
    /// ReadContractRequest
    /// </summary>
    [DataContract(Name = "ReadContractRequest")]
    [UnityEngine.Scripting.Preserve]
    public partial class ReadContractRequest
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ReadContractRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ReadContractRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ReadContractRequest" /> class.
        /// </summary>
        /// <param name="chainId">chainId (default to 13337).</param>
        /// <param name="functionName">functionName (required).</param>
        /// <param name="functionArgs">functionArgs (required).</param>
        [UnityEngine.Scripting.Preserve]
        public ReadContractRequest(long chainId = 13337, string functionName = default(string), List<string> functionArgs = default(List<string>))
        {
            // to ensure "functionName" is required (not null)
            if (functionName == null)
            {
                throw new ArgumentNullException("functionName is a required property for ReadContractRequest and cannot be null");
            }
            this.FunctionName = functionName;
            // to ensure "functionArgs" is required (not null)
            if (functionArgs == null)
            {
                throw new ArgumentNullException("functionArgs is a required property for ReadContractRequest and cannot be null");
            }
            this.FunctionArgs = functionArgs;
            this.ChainId = chainId;
        }

        /// <summary>
        /// Gets or Sets ChainId
        /// </summary>
        [DataMember(Name = "chainId", EmitDefaultValue = false)]
        [UnityEngine.Scripting.Preserve]
        public long ChainId { get; set; }

        /// <summary>
        /// Gets or Sets FunctionName
        /// </summary>
        [DataMember(Name = "functionName", IsRequired = true, EmitDefaultValue = true)]
        [UnityEngine.Scripting.Preserve]
        public string FunctionName { get; set; }

        /// <summary>
        /// Gets or Sets FunctionArgs
        /// </summary>
        [DataMember(Name = "functionArgs", IsRequired = true, EmitDefaultValue = true)]
        [UnityEngine.Scripting.Preserve]
        public List<string> FunctionArgs { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        [UnityEngine.Scripting.Preserve]
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ReadContractRequest {\n");
            sb.Append("  ChainId: ").Append(ChainId).Append("\n");
            sb.Append("  FunctionName: ").Append(FunctionName).Append("\n");
            sb.Append("  FunctionArgs: ").Append(FunctionArgs).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        [UnityEngine.Scripting.Preserve]
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
